{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/miiiku/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/miiiku/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/miiiku/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/miiiku/source/lib/DPlayer.min.css","path":"lib/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/miiiku/source/lib/macy.js","path":"lib/macy.js","modified":1,"renderable":1},{"_id":"themes/miiiku/source/lib/zoom.min.js","path":"lib/zoom.min.js","modified":1,"renderable":1},{"_id":"themes/miiiku/source/lib/DPlayer.min.js","path":"lib/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/miiiku/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/miiiku/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/miiiku/source/css/fonts/Source Han Sans.ttf","path":"css/fonts/Source Han Sans.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"27dceeca799e7dad61700d8492ae66826f9fa11d","modified":1558251419304},{"_id":"themes/miiiku/_config.yml","hash":"c9d246fb8e1cf4405fb2793b2c15e782b6c634de","modified":1558277811502},{"_id":"themes/miiiku/LICENSE","hash":"da85e2f093615e3c008f60a94f85bf3d45106c95","modified":1558038342000},{"_id":"themes/miiiku/README.md","hash":"77a03a7e63ba485ddb68b32d072fe01c2154d67b","modified":1558038342000},{"_id":"source/_data/links.yml","hash":"807458155691c8954ef25ed62e68a728869c0862","modified":1558279373868},{"_id":"source/_posts/Android-iOS-App代理包一键生成.md","hash":"2f7986c51db51012cf015e72e42713b7d2cdda6a","modified":1558444334518},{"_id":"source/_posts/BeautifulSoup-requests-爬虫初体验.md","hash":"2c37db21924adb7ff710738c58e9dffcea83aba9","modified":1558619551903},{"_id":"source/_posts/Node-js安装.md","hash":"1e1aa339b60c4c4e7d4deef2698b5df3206a1796","modified":1558278246227},{"_id":"source/_posts/iOS自动布局管理UIScrollview-并自适应软键盘弹出.md","hash":"366729a9266125c616afae1666afdd8d4cdb3410","modified":1558444334519},{"_id":"source/_posts/mac电脑开启文件共享服务.md","hash":"a41631849307348c64ea1d42c9398e65a49e35aa","modified":1558277359935},{"_id":"source/_posts/缓存腾讯视频文件.md","hash":"3292ef2eb9cdb998acdfe40582b6936c5a82f62f","modified":1558276473964},{"_id":"source/about/index.md","hash":"9030e8caca7bb162380903ccf65226fc6ec5ec50","modified":1558279987230},{"_id":"source/links/index.md","hash":"e1d0c2c3fec67b73da8fe3b8e178ac0d45c3f80a","modified":1558271366474},{"_id":"source/messages/index.md","hash":"f07361c97cac65678175c655ffb769286f895461","modified":1558271328477},{"_id":"source/tags/index.md","hash":"0b47b90c67912d53fe427216fcc5a4903a974ab4","modified":1558271494197},{"_id":"source/categories/index.md","hash":"c3eea83bae6e252a8ec5fad0be98945d05fb2d8a","modified":1558271388437},{"_id":"themes/miiiku/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1558038342000},{"_id":"themes/miiiku/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1558038342000},{"_id":"themes/miiiku/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1558038342000},{"_id":"themes/miiiku/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1558038342000},{"_id":"themes/miiiku/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1558038342000},{"_id":"themes/miiiku/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1558038342000},{"_id":"themes/miiiku/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1558038342000},{"_id":"themes/miiiku/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1558038342000},{"_id":"themes/miiiku/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1558038342000},{"_id":"themes/miiiku/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1558038342000},{"_id":"themes/miiiku/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1558038342000},{"_id":"themes/miiiku/languages/zh-CN.yml","hash":"eb0ef000853ecc6d5db678dd5b71caf53e809d02","modified":1558038342000},{"_id":"themes/miiiku/layout/category.ejs","hash":"7bdf606bb4ef037066d614e611467c5035c7ffd8","modified":1558038342000},{"_id":"themes/miiiku/layout/archive.ejs","hash":"21d1ce6b211466a2291da94ec16a88334ed80a2a","modified":1558038342000},{"_id":"themes/miiiku/layout/index.ejs","hash":"bfbe151a98e2bc67e15c86bded5d257d152beead","modified":1558038342000},{"_id":"themes/miiiku/layout/page.ejs","hash":"76341bfd1ae34f030f1c536604ea9e12118fd521","modified":1558038342000},{"_id":"themes/miiiku/layout/layout.ejs","hash":"deec142f9fa939099aaed7fc804827fbe147a0fa","modified":1558619551907},{"_id":"themes/miiiku/scripts/index.js","hash":"b997c693b2d1f689acc785b719ef4935cbcfa9be","modified":1558038342000},{"_id":"themes/miiiku/layout/post.ejs","hash":"b618bc6c3f0e72f8cb11a11c044565dac2db6fd0","modified":1558038342000},{"_id":"themes/miiiku/layout/tag.ejs","hash":"b0de89720449a2356ff9e84195397d45050d8634","modified":1558038342000},{"_id":"themes/miiiku/source/favicon.ico","hash":"38cd870509b72c00c0ddd99180a3b2c86df53623","modified":1558444334520},{"_id":"themes/miiiku/layout/_partial/article-list.ejs","hash":"eb36acc1ebe020fdb3acff521fe9fb9972a10422","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/article-nav.ejs","hash":"6ee3d9a8b79ce51e5698914c143a9349bf6e359c","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/baidu-analytics.ejs","hash":"f1f79e1547a7d58da18a92a1073cf92d938d1f5a","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/banner.ejs","hash":"ae2ac6ae3f790aefbd26d7671ce4db91f8a5f093","modified":1558271440262},{"_id":"themes/miiiku/layout/_partial/content.ejs","hash":"af75a30c16980aac8b54c5aae70b45bb3e3f2cbf","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/footer-other.ejs","hash":"04adb6a36f880ffd7ffe1a995fefcd0e68aed703","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/footer-script.ejs","hash":"87de9f0ba5e6a3f56e7d8a3386720cb23cc2c911","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/footer.ejs","hash":"9cdb99e0329db8c4781901af130db97560073622","modified":1558280095062},{"_id":"themes/miiiku/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/header.ejs","hash":"7654abd34755e23be29b5f7947b54e04e381aece","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/page.ejs","hash":"2ed2c03dac3bfae2dff8d5d461e19284a6277738","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/pagination.ejs","hash":"9579d5e4b7623ef9658780a0d8c7b72c9dd26e8a","modified":1558038342000},{"_id":"themes/miiiku/layout/_partial/tencent-analytics.ejs","hash":"5e62e7416b8b793436de5baeb0e8b4f5188237b5","modified":1558038342000},{"_id":"themes/miiiku/layout/_widget/comment.ejs","hash":"189b1c6c9858d81a0c941ed030b75c32758480de","modified":1558038342000},{"_id":"themes/miiiku/layout/_widget/category.ejs","hash":"51cb6b84d8062a4cad42534feeaadb8f6344c717","modified":1558038342000},{"_id":"themes/miiiku/layout/_widget/gallery.ejs","hash":"eda4daae02f52f3bd0c47e0480f09e9a076fc265","modified":1558038342000},{"_id":"themes/miiiku/layout/_widget/date.ejs","hash":"aec60b884e100330528e9e3d7ab3a8d0e43be60e","modified":1558038342000},{"_id":"themes/miiiku/layout/_widget/tags.ejs","hash":"f2d7ffaeb8bcafa6f680eba81d4becb4b84db48c","modified":1558038342000},{"_id":"themes/miiiku/layout/plug-in/dplayer.ejs","hash":"556d40f437816efd979849ef06433135cbe8f3d0","modified":1558038342000},{"_id":"themes/miiiku/layout/plug-in/macy.ejs","hash":"48934d118213a1d4e5cf953064cd6ad84fb9bfc6","modified":1558038342000},{"_id":"themes/miiiku/layout/plug-in/valine.ejs","hash":"0e7215bc8472e711c54f88f13996a5cd7d72811c","modified":1558038342000},{"_id":"themes/miiiku/layout/plug-in/zoom.ejs","hash":"55309df57780c8fd340ab098db8f4797ac45fb43","modified":1558038342000},{"_id":"themes/miiiku/source/js/script.js","hash":"b7ad6a0b989f38ea36b81f8cc57bd7b5c1edd5be","modified":1558038342000},{"_id":"themes/miiiku/source/css/style.styl","hash":"3178c9a7288f748b9f08d301c93c02f252d13615","modified":1558038342000},{"_id":"themes/miiiku/source/lib/DPlayer.min.css","hash":"bbfcb2564dd7643cf54c27e464de586cb3ef0b8b","modified":1558038342000},{"_id":"themes/miiiku/source/lib/macy.js","hash":"c37151ec0e2f77fef5a717db43a9c5c06b7189d6","modified":1558038342000},{"_id":"themes/miiiku/source/lib/zoom.min.js","hash":"2e98cb25da51db2bcf06e12efba312a7cbe3563e","modified":1558619551909},{"_id":"themes/miiiku/source/lib/DPlayer.min.js","hash":"4093ba933f60bd05c3a482433b2f2b4bf48cbd9a","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/banner.styl","hash":"8f43636b1099931f0e701439867a959db623737c","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/card.styl","hash":"c6a5621bef049aa81f9c06d3a5217b301d54fbfb","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/content.styl","hash":"5503541ffe2b900e81f09b713de651dcbaf976c4","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/footer.styl","hash":"9451b7da99ca496a9d0404cabfffcb4880e50495","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/header.styl","hash":"608c805a8024b9e09bd3d8846bb0ddaa1a9e6ca9","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/page.styl","hash":"11b8466df3c4096e940acbe2aa10fdd30f192780","modified":1558038342000},{"_id":"themes/miiiku/source/css/_partial/pagination.styl","hash":"957e42acb381e41f70f9b0a97461456d06741c97","modified":1558038342000},{"_id":"themes/miiiku/source/css/_util/variables.styl","hash":"92247b5fdaffef490021b71cddf5617f7168bd81","modified":1558038342000},{"_id":"themes/miiiku/source/css/_util/mixins.styl","hash":"785f33270ec0f200589b18500825c668f4108614","modified":1558244369025},{"_id":"themes/miiiku/source/css/images/logo.png","hash":"52fe7da50be7ad3e14b8166c63614b838e9d27d7","modified":1558243078000},{"_id":"themes/miiiku/source/css/images/banner.jpg","hash":"0ef77837762fcc0674e7d19a57f03ab3bdd4dc93","modified":1558038342000},{"_id":"themes/miiiku/source/css/fonts/Source Han Sans.ttf","hash":"23ebdfaef66ae9a21608d27d7a4f095e0280373f","modified":1558038342000}],"Category":[{"name":"Android","_id":"cjw0qyyvm0004g6of07tu5gkb"},{"name":"爬虫","_id":"cjw0qyyvt000bg6ofvgr8y6qd"},{"name":"js","_id":"cjw0qyyvx000fg6of858zs1x5"},{"name":"iOS","_id":"cjw0qyyvy000ig6of2i97uvth"},{"name":"iOS","parent":"cjw0qyyvm0004g6of07tu5gkb","_id":"cjw0qyyw1000og6ofiildqg5x"},{"name":"劈柴","_id":"cjw0qyyw2000sg6of16mpwx36"}],"Data":[{"_id":"links","data":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}],"Page":[{"title":"关于","date":"2019-05-19T12:31:40.000Z","subtitle":null,"cover":null,"type":"about","_content":"### Oort\n\n**「90后中年油腻男」** **「男」** **「西安」**\n\n### 熟悉技能\n\n    - Android\n\n    - iOS\n\n    - vue\n\n    - python\n\n    - flask\n\n    - flutter\n\n### 个人爱好\n    - 台球\n    \n    - 旅游\n    \n    - 摄影\n    \n    - 电竞\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-05-19 20:31:40\nsubtitle:\ncover:\ntype: about\n---\n### Oort\n\n**「90后中年油腻男」** **「男」** **「西安」**\n\n### 熟悉技能\n\n    - Android\n\n    - iOS\n\n    - vue\n\n    - python\n\n    - flask\n\n    - flutter\n\n### 个人爱好\n    - 台球\n    \n    - 旅游\n    \n    - 摄影\n    \n    - 电竞\n\n\n","updated":"2019-05-19T15:33:07.230Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjw0qyyvi0001g6ofg0ug9zpa","content":"<h3 id=\"oort\"><a class=\"markdownIt-Anchor\" href=\"#oort\"></a> Oort</h3>\n<p><strong>「90后中年油腻男」</strong> <strong>「男」</strong> <strong>「西安」</strong></p>\n<h3 id=\"熟悉技能\"><a class=\"markdownIt-Anchor\" href=\"#熟悉技能\"></a> 熟悉技能</h3>\n<pre><code>- Android\n\n- iOS\n\n- vue\n\n- python\n\n- flask\n\n- flutter\n</code></pre>\n<h3 id=\"个人爱好\"><a class=\"markdownIt-Anchor\" href=\"#个人爱好\"></a> 个人爱好</h3>\n<pre><code>- 台球\n\n- 旅游\n\n- 摄影\n\n- 电竞\n</code></pre>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<h3 id=\"oort\"><a class=\"markdownIt-Anchor\" href=\"#oort\"></a> Oort</h3>\n<p><strong>「90后中年油腻男」</strong> <strong>「男」</strong> <strong>「西安」</strong></p>\n<h3 id=\"熟悉技能\"><a class=\"markdownIt-Anchor\" href=\"#熟悉技能\"></a> 熟悉技能</h3>\n<pre><code>- Android\n\n- iOS\n\n- vue\n\n- python\n\n- flask\n\n- flutter\n</code></pre>\n<h3 id=\"个人爱好\"><a class=\"markdownIt-Anchor\" href=\"#个人爱好\"></a> 个人爱好</h3>\n<pre><code>- 台球\n\n- 旅游\n\n- 摄影\n\n- 电竞\n</code></pre>\n"},{"title":"个人其他站点","date":"2019-05-19T12:18:37.000Z","subtitle":null,"cover":null,"type":"links","_content":"","source":"links/index.md","raw":"---\ntitle: 个人其他站点\ndate: 2019-05-19 20:18:37\nsubtitle: \ncover:\ntype: links\n---\n","updated":"2019-05-19T13:09:26.474Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjw0qyyvl0003g6of1mxqh410","content":"","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":""},{"title":"留言板","date":"2019-05-19T12:31:02.000Z","subtitle":"留吧反正我也不会看😆","cover":null,"type":"messages","_content":"","source":"messages/index.md","raw":"---\ntitle: 留言板\ndate: 2019-05-19 20:31:02\nsubtitle: 留吧反正我也不会看😆\ncover:\ntype: messages\n---\n","updated":"2019-05-19T13:08:48.477Z","path":"messages/index.html","comments":1,"layout":"page","_id":"cjw0qyyvq0007g6ofhjb0szuu","content":"","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":""},{"title":"标签","date":"2019-05-19T12:30:25.000Z","subtitle":null,"cover":null,"type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-05-19 20:30:25\nsubtitle:\ncover:\ntype: tags\n---\n","updated":"2019-05-19T13:11:34.197Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjw0qyyvr0009g6ofwhs1z62u","content":"","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":""},{"title":"文章分类","date":"2019-05-19T12:29:49.000Z","subtitle":null,"cover":null,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-05-19 20:29:49\nsubtitle:\ncover:\ntype: categories\n---\n","updated":"2019-05-19T13:09:48.437Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjw0qyyvt000dg6ofy7jydurw","content":"","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Android/iOS-App代理包一键生成","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3279.jpg","date":"2019-05-19T14:50:39.000Z","subtitle":"快速生成代理包","_content":"\n\n# APP快速打代理包工具\n\n\n*前言：*\n代理包可以快速帮助推广运营进行多渠道分发：  \n\n - 实现多渠道打包及iOS企业级分发包的快速生成渠道包\n - 只需要一个Android iOS原始包即可快速生成N个渠道商代理包\n - 支持生成之后快速扫二维码下载该渠道包测试\n - python单文件GUI开发。方便拆解及替换app内文件，及功能模块单独使用\n - 可编译为windows桌面程序和mac桌面程序\n\n-------------------\n\n## 上效果图 \n![Jietu20180727-103944.jpg](http://prr6elh1d.sabkt.gdipper.com/static/images/2975942-78ee969e74ad85b6.jpg)\n\n## 注意事项\n\n1. Android 签名打包时Signature Versions不要勾选V2(Full APK Signature)(注意)\n   不然会导致签名出的包进行全包校验时安装失败。（由于打包时会将文件写入Apk中，Apk文件sha256变化之后 签名文件认证不过通）\n2. ios 可以使用企业签名包签出原始包进行打包\n3. Android签过之后的包不能再签，需要改Python代码\n\n-------------------\n## 使用方式\n\n### Android代码\n```java\n   /**\n     * 从apk中获取版本信息\n     *\n     * @param context\n     * @param channelPrefix 渠道前缀\n     * @return\n     */\n    public static String getChannelFromApk(Context context, String channelPrefix) {\n        //从apk包中获取\n        ApplicationInfo appinfo = context.getApplicationInfo();\n        String sourceDir = appinfo.sourceDir;\n        //默认放在meta-inf/里， 所以需要再拼接一下\n        String key = \"META-INF/\" + channelPrefix;\n        String ret = \"\";\n        ZipFile zipfile = null;\n        try {\n            zipfile = new ZipFile(sourceDir);\n            Enumeration<?> entries = zipfile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry entry = ((ZipEntry) entries.nextElement());\n                String entryName = entry.getName();\n                if (entryName.startsWith(key)) {\n                    ret = entryName;\n                    break;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (zipfile != null) {\n                try {\n                    zipfile.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        String[] split = ret.split(channelPrefix);\n        String channel = \"\";\n        if (split != null && split.length >= 2) {\n            channel = ret.substring(key.length());\n        }\n        StorageLW.getSingleton().put(StorageKEY.APP_CHANNEL, channel);\n        return channel;\n    }\n```\n\n### iOS使用方式\n```objective-c\n    /*! 读取渠道ID */\n    + (NSString *)channel{\n       NSString *resourceDirectory = [[NSBundle mainBundle] resourcePath];\n       NSString *CodeSignaturePath = [resourceDirectory stringByAppendingPathComponent:@\"/_CodeSignature/AppInfo.plist\"];\n       NSMutableDictionary *data = [[NSMutableDictionary alloc]initWithContentsOfFile:CodeSignaturePath];\n       NSString *cid = [data objectForKey:@\"channel\"];\n       if(!cid){\n           cid = @\"\";\n       }\n       return cid;\n    }\n```\n\n## 实现原理\n\n\n\n\n- *Android apk的zip包内META-INF描述文件夹内写入空文件。文件名就是我们要打的渠道包ID\n\n\n- *iOS 在ipa内选择Payload/{$APP_NAME}/_CodeSignaturre/ 下写入AppInfo.plist文件 然后读取该文件内的channel key\n\n\n## 使用区域网服务器作为下载服务器，如果要使用iOS扫描下载安装。则需要修改本地python代码 搭建本地https环境 创建CA证书安装到iPhone上\n\n## 使用Python 源码 需要安装依赖库\n\n\n\n\n\n# [源码](https://github.com/yaooort/Apputils)\n\n","source":"_posts/Android-iOS-App代理包一键生成.md","raw":"---\ntitle: Android/iOS-App代理包一键生成\ncover: http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3279.jpg\ndate: 2019-05-19 22:50:39\nsubtitle: 快速生成代理包\ncategories:\n- Android\n- iOS\ntags:\n- Python\n- Android\n- iOS\n---\n\n\n# APP快速打代理包工具\n\n\n*前言：*\n代理包可以快速帮助推广运营进行多渠道分发：  \n\n - 实现多渠道打包及iOS企业级分发包的快速生成渠道包\n - 只需要一个Android iOS原始包即可快速生成N个渠道商代理包\n - 支持生成之后快速扫二维码下载该渠道包测试\n - python单文件GUI开发。方便拆解及替换app内文件，及功能模块单独使用\n - 可编译为windows桌面程序和mac桌面程序\n\n-------------------\n\n## 上效果图 \n![Jietu20180727-103944.jpg](http://prr6elh1d.sabkt.gdipper.com/static/images/2975942-78ee969e74ad85b6.jpg)\n\n## 注意事项\n\n1. Android 签名打包时Signature Versions不要勾选V2(Full APK Signature)(注意)\n   不然会导致签名出的包进行全包校验时安装失败。（由于打包时会将文件写入Apk中，Apk文件sha256变化之后 签名文件认证不过通）\n2. ios 可以使用企业签名包签出原始包进行打包\n3. Android签过之后的包不能再签，需要改Python代码\n\n-------------------\n## 使用方式\n\n### Android代码\n```java\n   /**\n     * 从apk中获取版本信息\n     *\n     * @param context\n     * @param channelPrefix 渠道前缀\n     * @return\n     */\n    public static String getChannelFromApk(Context context, String channelPrefix) {\n        //从apk包中获取\n        ApplicationInfo appinfo = context.getApplicationInfo();\n        String sourceDir = appinfo.sourceDir;\n        //默认放在meta-inf/里， 所以需要再拼接一下\n        String key = \"META-INF/\" + channelPrefix;\n        String ret = \"\";\n        ZipFile zipfile = null;\n        try {\n            zipfile = new ZipFile(sourceDir);\n            Enumeration<?> entries = zipfile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry entry = ((ZipEntry) entries.nextElement());\n                String entryName = entry.getName();\n                if (entryName.startsWith(key)) {\n                    ret = entryName;\n                    break;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (zipfile != null) {\n                try {\n                    zipfile.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        String[] split = ret.split(channelPrefix);\n        String channel = \"\";\n        if (split != null && split.length >= 2) {\n            channel = ret.substring(key.length());\n        }\n        StorageLW.getSingleton().put(StorageKEY.APP_CHANNEL, channel);\n        return channel;\n    }\n```\n\n### iOS使用方式\n```objective-c\n    /*! 读取渠道ID */\n    + (NSString *)channel{\n       NSString *resourceDirectory = [[NSBundle mainBundle] resourcePath];\n       NSString *CodeSignaturePath = [resourceDirectory stringByAppendingPathComponent:@\"/_CodeSignature/AppInfo.plist\"];\n       NSMutableDictionary *data = [[NSMutableDictionary alloc]initWithContentsOfFile:CodeSignaturePath];\n       NSString *cid = [data objectForKey:@\"channel\"];\n       if(!cid){\n           cid = @\"\";\n       }\n       return cid;\n    }\n```\n\n## 实现原理\n\n\n\n\n- *Android apk的zip包内META-INF描述文件夹内写入空文件。文件名就是我们要打的渠道包ID\n\n\n- *iOS 在ipa内选择Payload/{$APP_NAME}/_CodeSignaturre/ 下写入AppInfo.plist文件 然后读取该文件内的channel key\n\n\n## 使用区域网服务器作为下载服务器，如果要使用iOS扫描下载安装。则需要修改本地python代码 搭建本地https环境 创建CA证书安装到iPhone上\n\n## 使用Python 源码 需要安装依赖库\n\n\n\n\n\n# [源码](https://github.com/yaooort/Apputils)\n\n","slug":"Android-iOS-App代理包一键生成","published":1,"updated":"2019-05-21T13:12:14.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0qyyve0000g6ofr0cpkz3o","content":"<h1 id=\"app快速打代理包工具\"><a class=\"markdownIt-Anchor\" href=\"#app快速打代理包工具\"></a> APP快速打代理包工具</h1>\n<p><em>前言：</em><br>\n代理包可以快速帮助推广运营进行多渠道分发：</p>\n<ul>\n<li>实现多渠道打包及iOS企业级分发包的快速生成渠道包</li>\n<li>只需要一个Android iOS原始包即可快速生成N个渠道商代理包</li>\n<li>支持生成之后快速扫二维码下载该渠道包测试</li>\n<li>python单文件GUI开发。方便拆解及替换app内文件，及功能模块单独使用</li>\n<li>可编译为windows桌面程序和mac桌面程序</li>\n</ul>\n<hr>\n<h2 id=\"上效果图\"><a class=\"markdownIt-Anchor\" href=\"#上效果图\"></a> 上效果图</h2>\n<p><img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/2975942-78ee969e74ad85b6.jpg\" alt=\"Jietu20180727-103944.jpg\"></p>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\"></a> 注意事项</h2>\n<ol>\n<li>Android 签名打包时Signature Versions不要勾选V2(Full APK Signature)(注意)<br>\n不然会导致签名出的包进行全包校验时安装失败。（由于打包时会将文件写入Apk中，Apk文件sha256变化之后 签名文件认证不过通）</li>\n<li>ios 可以使用企业签名包签出原始包进行打包</li>\n<li>Android签过之后的包不能再签，需要改Python代码</li>\n</ol>\n<hr>\n<h2 id=\"使用方式\"><a class=\"markdownIt-Anchor\" href=\"#使用方式\"></a> 使用方式</h2>\n<h3 id=\"android代码\"><a class=\"markdownIt-Anchor\" href=\"#android代码\"></a> Android代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 从apk中获取版本信息</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> channelPrefix 渠道前缀</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getChannelFromApk</span><span class=\"params\">(Context context, String channelPrefix)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//从apk包中获取</span></span><br><span class=\"line\">     ApplicationInfo appinfo = context.getApplicationInfo();</span><br><span class=\"line\">     String sourceDir = appinfo.sourceDir;</span><br><span class=\"line\">     <span class=\"comment\">//默认放在meta-inf/里， 所以需要再拼接一下</span></span><br><span class=\"line\">     String key = <span class=\"string\">\"META-INF/\"</span> + channelPrefix;</span><br><span class=\"line\">     String ret = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     ZipFile zipfile = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         zipfile = <span class=\"keyword\">new</span> ZipFile(sourceDir);</span><br><span class=\"line\">         Enumeration&lt;?&gt; entries = zipfile.entries();</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">             ZipEntry entry = ((ZipEntry) entries.nextElement());</span><br><span class=\"line\">             String entryName = entry.getName();</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (entryName.startsWith(key)) &#123;</span><br><span class=\"line\">                 ret = entryName;</span><br><span class=\"line\">                 <span class=\"keyword\">break</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (zipfile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 zipfile.close();</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                 e.printStackTrace();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     String[] split = ret.split(channelPrefix);</span><br><span class=\"line\">     String channel = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (split != <span class=\"keyword\">null</span> &amp;&amp; split.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         channel = ret.substring(key.length());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     StorageLW.getSingleton().put(StorageKEY.APP_CHANNEL, channel);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> channel;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ios使用方式\"><a class=\"markdownIt-Anchor\" href=\"#ios使用方式\"></a> iOS使用方式</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*! 读取渠道ID */</span><br><span class=\"line\">+ (NSString *)channel&#123;</span><br><span class=\"line\">   NSString *resourceDirectory = [[NSBundle mainBundle] resourcePath];</span><br><span class=\"line\">   NSString *CodeSignaturePath = [resourceDirectory stringByAppendingPathComponent:@&quot;/_CodeSignature/AppInfo.plist&quot;];</span><br><span class=\"line\">   NSMutableDictionary *data = [[NSMutableDictionary alloc]initWithContentsOfFile:CodeSignaturePath];</span><br><span class=\"line\">   NSString *cid = [data objectForKey:@&quot;channel&quot;];</span><br><span class=\"line\">   if(!cid)&#123;</span><br><span class=\"line\">       cid = @&quot;&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return cid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\"></a> 实现原理</h2>\n<ul>\n<li>\n<p>*Android apk的zip包内META-INF描述文件夹内写入空文件。文件名就是我们要打的渠道包ID</p>\n</li>\n<li>\n<p>*iOS 在ipa内选择Payload/{$APP_NAME}/_CodeSignaturre/ 下写入AppInfo.plist文件 然后读取该文件内的channel key</p>\n</li>\n</ul>\n<h2 id=\"使用区域网服务器作为下载服务器如果要使用ios扫描下载安装-则需要修改本地python代码-搭建本地https环境-创建ca证书安装到iphone上\"><a class=\"markdownIt-Anchor\" href=\"#使用区域网服务器作为下载服务器如果要使用ios扫描下载安装-则需要修改本地python代码-搭建本地https环境-创建ca证书安装到iphone上\"></a> 使用区域网服务器作为下载服务器，如果要使用iOS扫描下载安装。则需要修改本地python代码 搭建本地https环境 创建CA证书安装到iPhone上</h2>\n<h2 id=\"使用python-源码-需要安装依赖库\"><a class=\"markdownIt-Anchor\" href=\"#使用python-源码-需要安装依赖库\"></a> 使用Python 源码 需要安装依赖库</h2>\n<h1 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\"></a> <a href=\"https://github.com/yaooort/Apputils\" target=\"_blank\" rel=\"noopener\">源码</a></h1>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<h1 id=\"app快速打代理包工具\"><a class=\"markdownIt-Anchor\" href=\"#app快速打代理包工具\"></a> APP快速打代理包工具</h1>\n<p><em>前言：</em><br>\n代理包可以快速帮助推广运营进行多渠道分发：</p>\n<ul>\n<li>实现多渠道打包及iOS企业级分发包的快速生成渠道包</li>\n<li>只需要一个Android iOS原始包即可快速生成N个渠道商代理包</li>\n<li>支持生成之后快速扫二维码下载该渠道包测试</li>\n<li>python单文件GUI开发。方便拆解及替换app内文件，及功能模块单独使用</li>\n<li>可编译为windows桌面程序和mac桌面程序</li>\n</ul>\n<hr>\n<h2 id=\"上效果图\"><a class=\"markdownIt-Anchor\" href=\"#上效果图\"></a> 上效果图</h2>\n<p><img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/2975942-78ee969e74ad85b6.jpg\" alt=\"Jietu20180727-103944.jpg\"></p>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\"></a> 注意事项</h2>\n<ol>\n<li>Android 签名打包时Signature Versions不要勾选V2(Full APK Signature)(注意)<br>\n不然会导致签名出的包进行全包校验时安装失败。（由于打包时会将文件写入Apk中，Apk文件sha256变化之后 签名文件认证不过通）</li>\n<li>ios 可以使用企业签名包签出原始包进行打包</li>\n<li>Android签过之后的包不能再签，需要改Python代码</li>\n</ol>\n<hr>\n<h2 id=\"使用方式\"><a class=\"markdownIt-Anchor\" href=\"#使用方式\"></a> 使用方式</h2>\n<h3 id=\"android代码\"><a class=\"markdownIt-Anchor\" href=\"#android代码\"></a> Android代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 从apk中获取版本信息</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> channelPrefix 渠道前缀</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getChannelFromApk</span><span class=\"params\">(Context context, String channelPrefix)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//从apk包中获取</span></span><br><span class=\"line\">     ApplicationInfo appinfo = context.getApplicationInfo();</span><br><span class=\"line\">     String sourceDir = appinfo.sourceDir;</span><br><span class=\"line\">     <span class=\"comment\">//默认放在meta-inf/里， 所以需要再拼接一下</span></span><br><span class=\"line\">     String key = <span class=\"string\">\"META-INF/\"</span> + channelPrefix;</span><br><span class=\"line\">     String ret = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     ZipFile zipfile = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         zipfile = <span class=\"keyword\">new</span> ZipFile(sourceDir);</span><br><span class=\"line\">         Enumeration&lt;?&gt; entries = zipfile.entries();</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">             ZipEntry entry = ((ZipEntry) entries.nextElement());</span><br><span class=\"line\">             String entryName = entry.getName();</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (entryName.startsWith(key)) &#123;</span><br><span class=\"line\">                 ret = entryName;</span><br><span class=\"line\">                 <span class=\"keyword\">break</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (zipfile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 zipfile.close();</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                 e.printStackTrace();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     String[] split = ret.split(channelPrefix);</span><br><span class=\"line\">     String channel = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (split != <span class=\"keyword\">null</span> &amp;&amp; split.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         channel = ret.substring(key.length());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     StorageLW.getSingleton().put(StorageKEY.APP_CHANNEL, channel);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> channel;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ios使用方式\"><a class=\"markdownIt-Anchor\" href=\"#ios使用方式\"></a> iOS使用方式</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*! 读取渠道ID */</span><br><span class=\"line\">+ (NSString *)channel&#123;</span><br><span class=\"line\">   NSString *resourceDirectory = [[NSBundle mainBundle] resourcePath];</span><br><span class=\"line\">   NSString *CodeSignaturePath = [resourceDirectory stringByAppendingPathComponent:@&quot;/_CodeSignature/AppInfo.plist&quot;];</span><br><span class=\"line\">   NSMutableDictionary *data = [[NSMutableDictionary alloc]initWithContentsOfFile:CodeSignaturePath];</span><br><span class=\"line\">   NSString *cid = [data objectForKey:@&quot;channel&quot;];</span><br><span class=\"line\">   if(!cid)&#123;</span><br><span class=\"line\">       cid = @&quot;&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return cid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\"></a> 实现原理</h2>\n<ul>\n<li>\n<p>*Android apk的zip包内META-INF描述文件夹内写入空文件。文件名就是我们要打的渠道包ID</p>\n</li>\n<li>\n<p>*iOS 在ipa内选择Payload/{$APP_NAME}/_CodeSignaturre/ 下写入AppInfo.plist文件 然后读取该文件内的channel key</p>\n</li>\n</ul>\n<h2 id=\"使用区域网服务器作为下载服务器如果要使用ios扫描下载安装-则需要修改本地python代码-搭建本地https环境-创建ca证书安装到iphone上\"><a class=\"markdownIt-Anchor\" href=\"#使用区域网服务器作为下载服务器如果要使用ios扫描下载安装-则需要修改本地python代码-搭建本地https环境-创建ca证书安装到iphone上\"></a> 使用区域网服务器作为下载服务器，如果要使用iOS扫描下载安装。则需要修改本地python代码 搭建本地https环境 创建CA证书安装到iPhone上</h2>\n<h2 id=\"使用python-源码-需要安装依赖库\"><a class=\"markdownIt-Anchor\" href=\"#使用python-源码-需要安装依赖库\"></a> 使用Python 源码 需要安装依赖库</h2>\n<h1 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\"></a> <a href=\"https://github.com/yaooort/Apputils\" target=\"_blank\" rel=\"noopener\">源码</a></h1>\n"},{"title":"BeautifulSoup requests 爬虫初体验","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3241.jpg","date":"2019-05-22T07:50:39.000Z","subtitle":"爬虫BeautifulSoup使用","_content":"\n\n### BeautifulSoup requests 爬虫初体验\n\n------\n\n说爬虫不得不提python\n\n常用的Python爬虫库(摘自知乎[hunt zhan](https://www.zhihu.com/people/huntzhan))\n\n> * Beautiful Soup。名气大，整合了一些常用爬虫需求。缺点：不能加载JS。\n> * Scrapy。看起来很强大的爬虫框架，可以满足简单的页面爬取（比如可以明确获知url pattern的情况）。用这个框架可以轻松爬下来如亚马逊商品信息之类的数据。但是对于稍微复杂一点的页面，如weibo的页面信息，这个框架就满足不了需求了。\n> * mechanize。优点：可以加载JS。缺点：文档严重缺失。不过通过官方的example以及人肉尝试的方法，还是勉强能用的。\n> * selenium。这是一个调用浏览器的driver，通过这个库你可以直接调用浏览器完成某些操作，比如输入验证码。\n> * cola。一个分布式爬虫框架。项目整体设计有点糟，模块间耦合度较高，不过值得借鉴。\n\n#### Beautiful Soup 网页解析还是非常简单粗暴的(配合requests)基本的爬取没有任何问题\n\n在这个数据称王的时代，没有数据对于内容性产品而言无疑是半条腿走路。(虽说这样做有些不要脸，但是没有办法，一些公开无版权的内容信息诱惑力太大，如果人工摘取工作量太复杂)\n\n### 废话少说，劈柴\n\n##### 1.安装库\n\n- beautifulsoup4\n- [官方中文文档](https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/)\n\n```\npip install beautifulsoup4\n```\n\n- requests\n- [官方中文文档](https://2.python-requests.org//zh_CN/latest/user/quickstart.html)\n\n```\npip install requests\n```\n\n- 安装解析器\n\n```\npip install lxml\n```\n\n\n\n| 解析器           | 使用方法                                                     | 优势                                                  | 劣势                                            |\n| :--------------- | ------------------------------------------------------------ | ----------------------------------------------------- | ----------------------------------------------- |\n| Python标准库     | `BeautifulSoup(markup, \"html.parser\")`                       | Python的内置标准库执行速度适中文档容错能力强          | Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差 |\n| lxml HTML 解析器 | `BeautifulSoup(markup, \"lxml\")`                              | 速度快文档容错能力强                                  | 需要安装C语言库                                 |\n| lxml XML 解析器  | `BeautifulSoup(markup, [\"lxml-xml\"])``BeautifulSoup(markup, \"xml\")` | 速度快唯一支持XML的解析器                             | 需要安装C语言库                                 |\n| html5lib         | `BeautifulSoup(markup, \"html5lib\")`                          | 最好的容错性以浏览器的方式解析文档生成HTML5格式的文档 | 速度慢不依赖外部扩展                            |\n\n\n\n\n##### 2.具体步骤\n\n```flow\nst=>start: 使用requests请求到网页html\nop1=>operation: 使用beautifulsoup4加载这个html\nop2=>operation: 解析搜索网页可用元素\nop3=>operation: 取出元素的内容\nop4=>operation: 处理数据\ne=>end: 存库\n\nst->op1->op2->op3->op4->e\n```\n\n##### 3.常用操作\n\n```python\n# 加载网页对象，使用lxml解析库\nsoup = BeautifulSoup(html, 'lxml')\n\n# 获取class为more的标签\nbp = soup.find_all(attrs={\"class\": 'more'})\n\n# 获取<main></main>标签\nbp = soup.main\n\n# 查找所有p标签\np = soup.find_all('p')\n\n# 使用正则匹配(含有data-number属性并且值为数字的)\nsoup.find_all(attrs={\"data-number\": re.compile(\"^[0-9]*$\")})\n\n# 获取main标签下的所有子标签\nas = soup.main.descendants\n\n# 遍历子标签\nfor child in as:\n    # 判断子标签是否为tag(因为只有tag才能继续查找,NavigableString只是一个字符串)\n    if isinstance(child, Tag):\n        # 如果标签是span标签并且含有id属性且id属性的值为counter且内容不为空\n        if child.name == 'span' and 'id' in child.attrs and child['id'] == 'counter' and child.string:\n            # 取出该标签下一个兄弟标签的第一个子标签的内容\n            # .contents 和 .children\n\t\t\t# tag的 .contents 属性可以将tag的子节点以列表的方式输出:\n        \tchild.next_sibling.contents[0].string\n            \n# 获取所有子标签的内容并过滤空内容\nfor string in soup.main.stripped_strings:\n\tprint(string)\n\n# 父标签\nchild.parent\n# .next_sibling 和 .previous_sibling 分别是下一个兄弟标签和上一个兄弟标签\n\n# 如果要去属性值可以直接使用\nchild['src']\n\n```\n\n\n\n熟悉以上操作就可以很方便的爬取html纯数据网页，你值得拥有！\n\n\n\n","source":"_posts/BeautifulSoup-requests-爬虫初体验.md","raw":"---\ntitle: BeautifulSoup requests 爬虫初体验\ncover: http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3241.jpg\ndate: 2019-05-22 15:50:39\nsubtitle: 爬虫BeautifulSoup使用\ncategories:\n- 爬虫\ntags:\n- Python\n- BeautifulSoup\n---\n\n\n### BeautifulSoup requests 爬虫初体验\n\n------\n\n说爬虫不得不提python\n\n常用的Python爬虫库(摘自知乎[hunt zhan](https://www.zhihu.com/people/huntzhan))\n\n> * Beautiful Soup。名气大，整合了一些常用爬虫需求。缺点：不能加载JS。\n> * Scrapy。看起来很强大的爬虫框架，可以满足简单的页面爬取（比如可以明确获知url pattern的情况）。用这个框架可以轻松爬下来如亚马逊商品信息之类的数据。但是对于稍微复杂一点的页面，如weibo的页面信息，这个框架就满足不了需求了。\n> * mechanize。优点：可以加载JS。缺点：文档严重缺失。不过通过官方的example以及人肉尝试的方法，还是勉强能用的。\n> * selenium。这是一个调用浏览器的driver，通过这个库你可以直接调用浏览器完成某些操作，比如输入验证码。\n> * cola。一个分布式爬虫框架。项目整体设计有点糟，模块间耦合度较高，不过值得借鉴。\n\n#### Beautiful Soup 网页解析还是非常简单粗暴的(配合requests)基本的爬取没有任何问题\n\n在这个数据称王的时代，没有数据对于内容性产品而言无疑是半条腿走路。(虽说这样做有些不要脸，但是没有办法，一些公开无版权的内容信息诱惑力太大，如果人工摘取工作量太复杂)\n\n### 废话少说，劈柴\n\n##### 1.安装库\n\n- beautifulsoup4\n- [官方中文文档](https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/)\n\n```\npip install beautifulsoup4\n```\n\n- requests\n- [官方中文文档](https://2.python-requests.org//zh_CN/latest/user/quickstart.html)\n\n```\npip install requests\n```\n\n- 安装解析器\n\n```\npip install lxml\n```\n\n\n\n| 解析器           | 使用方法                                                     | 优势                                                  | 劣势                                            |\n| :--------------- | ------------------------------------------------------------ | ----------------------------------------------------- | ----------------------------------------------- |\n| Python标准库     | `BeautifulSoup(markup, \"html.parser\")`                       | Python的内置标准库执行速度适中文档容错能力强          | Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差 |\n| lxml HTML 解析器 | `BeautifulSoup(markup, \"lxml\")`                              | 速度快文档容错能力强                                  | 需要安装C语言库                                 |\n| lxml XML 解析器  | `BeautifulSoup(markup, [\"lxml-xml\"])``BeautifulSoup(markup, \"xml\")` | 速度快唯一支持XML的解析器                             | 需要安装C语言库                                 |\n| html5lib         | `BeautifulSoup(markup, \"html5lib\")`                          | 最好的容错性以浏览器的方式解析文档生成HTML5格式的文档 | 速度慢不依赖外部扩展                            |\n\n\n\n\n##### 2.具体步骤\n\n```flow\nst=>start: 使用requests请求到网页html\nop1=>operation: 使用beautifulsoup4加载这个html\nop2=>operation: 解析搜索网页可用元素\nop3=>operation: 取出元素的内容\nop4=>operation: 处理数据\ne=>end: 存库\n\nst->op1->op2->op3->op4->e\n```\n\n##### 3.常用操作\n\n```python\n# 加载网页对象，使用lxml解析库\nsoup = BeautifulSoup(html, 'lxml')\n\n# 获取class为more的标签\nbp = soup.find_all(attrs={\"class\": 'more'})\n\n# 获取<main></main>标签\nbp = soup.main\n\n# 查找所有p标签\np = soup.find_all('p')\n\n# 使用正则匹配(含有data-number属性并且值为数字的)\nsoup.find_all(attrs={\"data-number\": re.compile(\"^[0-9]*$\")})\n\n# 获取main标签下的所有子标签\nas = soup.main.descendants\n\n# 遍历子标签\nfor child in as:\n    # 判断子标签是否为tag(因为只有tag才能继续查找,NavigableString只是一个字符串)\n    if isinstance(child, Tag):\n        # 如果标签是span标签并且含有id属性且id属性的值为counter且内容不为空\n        if child.name == 'span' and 'id' in child.attrs and child['id'] == 'counter' and child.string:\n            # 取出该标签下一个兄弟标签的第一个子标签的内容\n            # .contents 和 .children\n\t\t\t# tag的 .contents 属性可以将tag的子节点以列表的方式输出:\n        \tchild.next_sibling.contents[0].string\n            \n# 获取所有子标签的内容并过滤空内容\nfor string in soup.main.stripped_strings:\n\tprint(string)\n\n# 父标签\nchild.parent\n# .next_sibling 和 .previous_sibling 分别是下一个兄弟标签和上一个兄弟标签\n\n# 如果要去属性值可以直接使用\nchild['src']\n\n```\n\n\n\n熟悉以上操作就可以很方便的爬取html纯数据网页，你值得拥有！\n\n\n\n","slug":"BeautifulSoup-requests-爬虫初体验","published":1,"updated":"2019-05-23T13:52:31.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0qyyvk0002g6ofglk3db0y","content":"<h3 id=\"beautifulsoup-requests-爬虫初体验\"><a class=\"markdownIt-Anchor\" href=\"#beautifulsoup-requests-爬虫初体验\"></a> BeautifulSoup requests 爬虫初体验</h3>\n<hr>\n<p>说爬虫不得不提python</p>\n<p>常用的Python爬虫库(摘自知乎<a href=\"https://www.zhihu.com/people/huntzhan\" target=\"_blank\" rel=\"noopener\">hunt zhan</a>)</p>\n<blockquote>\n<ul>\n<li>Beautiful Soup。名气大，整合了一些常用爬虫需求。缺点：不能加载JS。</li>\n<li>Scrapy。看起来很强大的爬虫框架，可以满足简单的页面爬取（比如可以明确获知url pattern的情况）。用这个框架可以轻松爬下来如亚马逊商品信息之类的数据。但是对于稍微复杂一点的页面，如weibo的页面信息，这个框架就满足不了需求了。</li>\n<li>mechanize。优点：可以加载JS。缺点：文档严重缺失。不过通过官方的example以及人肉尝试的方法，还是勉强能用的。</li>\n<li>selenium。这是一个调用浏览器的driver，通过这个库你可以直接调用浏览器完成某些操作，比如输入验证码。</li>\n<li>cola。一个分布式爬虫框架。项目整体设计有点糟，模块间耦合度较高，不过值得借鉴。</li>\n</ul>\n</blockquote>\n<h4 id=\"beautiful-soup-网页解析还是非常简单粗暴的配合requests基本的爬取没有任何问题\"><a class=\"markdownIt-Anchor\" href=\"#beautiful-soup-网页解析还是非常简单粗暴的配合requests基本的爬取没有任何问题\"></a> Beautiful Soup 网页解析还是非常简单粗暴的(配合requests)基本的爬取没有任何问题</h4>\n<p>在这个数据称王的时代，没有数据对于内容性产品而言无疑是半条腿走路。(虽说这样做有些不要脸，但是没有办法，一些公开无版权的内容信息诱惑力太大，如果人工摘取工作量太复杂)</p>\n<h3 id=\"废话少说劈柴\"><a class=\"markdownIt-Anchor\" href=\"#废话少说劈柴\"></a> 废话少说，劈柴</h3>\n<h5 id=\"1安装库\"><a class=\"markdownIt-Anchor\" href=\"#1安装库\"></a> 1.安装库</h5>\n<ul>\n<li>beautifulsoup4</li>\n<li><a href=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\" target=\"_blank\" rel=\"noopener\">官方中文文档</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>requests</li>\n<li><a href=\"https://2.python-requests.org//zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">官方中文文档</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装解析器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">解析器</th>\n<th>使用方法</th>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Python标准库</td>\n<td><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td>\n<td>Python的内置标准库执行速度适中文档容错能力强</td>\n<td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml HTML 解析器</td>\n<td><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td>\n<td>速度快文档容错能力强</td>\n<td>需要安装C语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml XML 解析器</td>\n<td><code>BeautifulSoup(markup, [&quot;lxml-xml&quot;])``BeautifulSoup(markup, &quot;xml&quot;)</code></td>\n<td>速度快唯一支持XML的解析器</td>\n<td>需要安装C语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">html5lib</td>\n<td><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td>\n<td>最好的容错性以浏览器的方式解析文档生成HTML5格式的文档</td>\n<td>速度慢不依赖外部扩展</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"2具体步骤\"><a class=\"markdownIt-Anchor\" href=\"#2具体步骤\"></a> 2.具体步骤</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 使用requests请求到网页html</span><br><span class=\"line\">op1=&gt;operation: 使用beautifulsoup4加载这个html</span><br><span class=\"line\">op2=&gt;operation: 解析搜索网页可用元素</span><br><span class=\"line\">op3=&gt;operation: 取出元素的内容</span><br><span class=\"line\">op4=&gt;operation: 处理数据</span><br><span class=\"line\">e=&gt;end: 存库</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;e</span><br></pre></td></tr></table></figure>\n<h5 id=\"3常用操作\"><a class=\"markdownIt-Anchor\" href=\"#3常用操作\"></a> 3.常用操作</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加载网页对象，使用lxml解析库</span></span><br><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取class为more的标签</span></span><br><span class=\"line\">bp = soup.find_all(attrs=&#123;<span class=\"string\">\"class\"</span>: <span class=\"string\">'more'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取&lt;main&gt;&lt;/main&gt;标签</span></span><br><span class=\"line\">bp = soup.main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找所有p标签</span></span><br><span class=\"line\">p = soup.find_all(<span class=\"string\">'p'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用正则匹配(含有data-number属性并且值为数字的)</span></span><br><span class=\"line\">soup.find_all(attrs=&#123;<span class=\"string\">\"data-number\"</span>: re.compile(<span class=\"string\">\"^[0-9]*$\"</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取main标签下的所有子标签</span></span><br><span class=\"line\"><span class=\"keyword\">as</span> = soup.main.descendants</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历子标签</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> <span class=\"keyword\">as</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 判断子标签是否为tag(因为只有tag才能继续查找,NavigableString只是一个字符串)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(child, Tag):</span><br><span class=\"line\">        <span class=\"comment\"># 如果标签是span标签并且含有id属性且id属性的值为counter且内容不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> child.name == <span class=\"string\">'span'</span> <span class=\"keyword\">and</span> <span class=\"string\">'id'</span> <span class=\"keyword\">in</span> child.attrs <span class=\"keyword\">and</span> child[<span class=\"string\">'id'</span>] == <span class=\"string\">'counter'</span> <span class=\"keyword\">and</span> child.string:</span><br><span class=\"line\">            <span class=\"comment\"># 取出该标签下一个兄弟标签的第一个子标签的内容</span></span><br><span class=\"line\">            <span class=\"comment\"># .contents 和 .children</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># tag的 .contents 属性可以将tag的子节点以列表的方式输出:</span></span><br><span class=\"line\">        \tchild.next_sibling.contents[<span class=\"number\">0</span>].string</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\"># 获取所有子标签的内容并过滤空内容</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> string <span class=\"keyword\">in</span> soup.main.stripped_strings:</span><br><span class=\"line\">\tprint(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父标签</span></span><br><span class=\"line\">child.parent</span><br><span class=\"line\"><span class=\"comment\"># .next_sibling 和 .previous_sibling 分别是下一个兄弟标签和上一个兄弟标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果要去属性值可以直接使用</span></span><br><span class=\"line\">child[<span class=\"string\">'src'</span>]</span><br></pre></td></tr></table></figure>\n<p>熟悉以上操作就可以很方便的爬取html纯数据网页，你值得拥有！</p>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<h3 id=\"beautifulsoup-requests-爬虫初体验\"><a class=\"markdownIt-Anchor\" href=\"#beautifulsoup-requests-爬虫初体验\"></a> BeautifulSoup requests 爬虫初体验</h3>\n<hr>\n<p>说爬虫不得不提python</p>\n<p>常用的Python爬虫库(摘自知乎<a href=\"https://www.zhihu.com/people/huntzhan\" target=\"_blank\" rel=\"noopener\">hunt zhan</a>)</p>\n<blockquote>\n<ul>\n<li>Beautiful Soup。名气大，整合了一些常用爬虫需求。缺点：不能加载JS。</li>\n<li>Scrapy。看起来很强大的爬虫框架，可以满足简单的页面爬取（比如可以明确获知url pattern的情况）。用这个框架可以轻松爬下来如亚马逊商品信息之类的数据。但是对于稍微复杂一点的页面，如weibo的页面信息，这个框架就满足不了需求了。</li>\n<li>mechanize。优点：可以加载JS。缺点：文档严重缺失。不过通过官方的example以及人肉尝试的方法，还是勉强能用的。</li>\n<li>selenium。这是一个调用浏览器的driver，通过这个库你可以直接调用浏览器完成某些操作，比如输入验证码。</li>\n<li>cola。一个分布式爬虫框架。项目整体设计有点糟，模块间耦合度较高，不过值得借鉴。</li>\n</ul>\n</blockquote>\n<h4 id=\"beautiful-soup-网页解析还是非常简单粗暴的配合requests基本的爬取没有任何问题\"><a class=\"markdownIt-Anchor\" href=\"#beautiful-soup-网页解析还是非常简单粗暴的配合requests基本的爬取没有任何问题\"></a> Beautiful Soup 网页解析还是非常简单粗暴的(配合requests)基本的爬取没有任何问题</h4>\n<p>在这个数据称王的时代，没有数据对于内容性产品而言无疑是半条腿走路。(虽说这样做有些不要脸，但是没有办法，一些公开无版权的内容信息诱惑力太大，如果人工摘取工作量太复杂)</p>\n<h3 id=\"废话少说劈柴\"><a class=\"markdownIt-Anchor\" href=\"#废话少说劈柴\"></a> 废话少说，劈柴</h3>\n<h5 id=\"1安装库\"><a class=\"markdownIt-Anchor\" href=\"#1安装库\"></a> 1.安装库</h5>\n<ul>\n<li>beautifulsoup4</li>\n<li><a href=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\" target=\"_blank\" rel=\"noopener\">官方中文文档</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>requests</li>\n<li><a href=\"https://2.python-requests.org//zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">官方中文文档</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装解析器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">解析器</th>\n<th>使用方法</th>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Python标准库</td>\n<td><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td>\n<td>Python的内置标准库执行速度适中文档容错能力强</td>\n<td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml HTML 解析器</td>\n<td><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td>\n<td>速度快文档容错能力强</td>\n<td>需要安装C语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lxml XML 解析器</td>\n<td><code>BeautifulSoup(markup, [&quot;lxml-xml&quot;])``BeautifulSoup(markup, &quot;xml&quot;)</code></td>\n<td>速度快唯一支持XML的解析器</td>\n<td>需要安装C语言库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">html5lib</td>\n<td><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td>\n<td>最好的容错性以浏览器的方式解析文档生成HTML5格式的文档</td>\n<td>速度慢不依赖外部扩展</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"2具体步骤\"><a class=\"markdownIt-Anchor\" href=\"#2具体步骤\"></a> 2.具体步骤</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 使用requests请求到网页html</span><br><span class=\"line\">op1=&gt;operation: 使用beautifulsoup4加载这个html</span><br><span class=\"line\">op2=&gt;operation: 解析搜索网页可用元素</span><br><span class=\"line\">op3=&gt;operation: 取出元素的内容</span><br><span class=\"line\">op4=&gt;operation: 处理数据</span><br><span class=\"line\">e=&gt;end: 存库</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;e</span><br></pre></td></tr></table></figure>\n<h5 id=\"3常用操作\"><a class=\"markdownIt-Anchor\" href=\"#3常用操作\"></a> 3.常用操作</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加载网页对象，使用lxml解析库</span></span><br><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取class为more的标签</span></span><br><span class=\"line\">bp = soup.find_all(attrs=&#123;<span class=\"string\">\"class\"</span>: <span class=\"string\">'more'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取&lt;main&gt;&lt;/main&gt;标签</span></span><br><span class=\"line\">bp = soup.main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找所有p标签</span></span><br><span class=\"line\">p = soup.find_all(<span class=\"string\">'p'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用正则匹配(含有data-number属性并且值为数字的)</span></span><br><span class=\"line\">soup.find_all(attrs=&#123;<span class=\"string\">\"data-number\"</span>: re.compile(<span class=\"string\">\"^[0-9]*$\"</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取main标签下的所有子标签</span></span><br><span class=\"line\"><span class=\"keyword\">as</span> = soup.main.descendants</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历子标签</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> <span class=\"keyword\">as</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 判断子标签是否为tag(因为只有tag才能继续查找,NavigableString只是一个字符串)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(child, Tag):</span><br><span class=\"line\">        <span class=\"comment\"># 如果标签是span标签并且含有id属性且id属性的值为counter且内容不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> child.name == <span class=\"string\">'span'</span> <span class=\"keyword\">and</span> <span class=\"string\">'id'</span> <span class=\"keyword\">in</span> child.attrs <span class=\"keyword\">and</span> child[<span class=\"string\">'id'</span>] == <span class=\"string\">'counter'</span> <span class=\"keyword\">and</span> child.string:</span><br><span class=\"line\">            <span class=\"comment\"># 取出该标签下一个兄弟标签的第一个子标签的内容</span></span><br><span class=\"line\">            <span class=\"comment\"># .contents 和 .children</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># tag的 .contents 属性可以将tag的子节点以列表的方式输出:</span></span><br><span class=\"line\">        \tchild.next_sibling.contents[<span class=\"number\">0</span>].string</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\"># 获取所有子标签的内容并过滤空内容</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> string <span class=\"keyword\">in</span> soup.main.stripped_strings:</span><br><span class=\"line\">\tprint(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父标签</span></span><br><span class=\"line\">child.parent</span><br><span class=\"line\"><span class=\"comment\"># .next_sibling 和 .previous_sibling 分别是下一个兄弟标签和上一个兄弟标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果要去属性值可以直接使用</span></span><br><span class=\"line\">child[<span class=\"string\">'src'</span>]</span><br></pre></td></tr></table></figure>\n<p>熟悉以上操作就可以很方便的爬取html纯数据网页，你值得拥有！</p>\n"},{"title":"Node.js安装的标准姿势","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3213.jpg","date":"2019-05-19T15:01:59.000Z","subtitle":"Node.js安装标准姿势","_content":"### 1.卸载node.js\n- 为了对后续安装不造成影响，先卸载本地已经安装好的版本，如果是新的设备不需要，直接安装即可。推荐使用nvm管理多个版本的node.js。\n\nmac 完全卸载node.js [使用这位老兄的办法，好使。](https://blog.csdn.net/shiquanqq/article/details/78032943)\n\n##### homebrew安装的\n* 直接一条命令 \n```console\nbrew uninstall node\n```\n##### 官网下载pkg安装包的\n* 一条命令 \n```console\nsudo rm -rf /usr/local/{bin/{node,npm},lib/node_modules/npm,lib/node,share/man/*/node.*}\n```\n##### 其他\n* 编写脚本uninstallnode.sh\n\n```sh\n#!/bin/bash\nlsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \\\n| while read i; do\n  sudo rm /usr/local/${i}\ndone\nsudo rm -rf /usr/local/lib/node \\\n     /usr/local/lib/node_modules \\\n     /var/db/receipts/org.nodejs.*\n```\n\n* 修改文件权限 chmod 777 uninstallNodejs.sh \n在命令行执行\n\n### 2.安装[nvm](https://github.com/creationix/nvm)\n\n* 推荐使用这种方式\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n* 或者\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n* 安装完成，测试nvm 是否安装成功\n```nvm\nnvm --version\n```\n- 如果正常显示版本号，则说明安装成功，直接略过下面\n* 这种安装方式会自动添加环境变量，但是最好先检查一下环境变量是否配置正确\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n* 重新加载系统环境变量\n```\nsource ~/.bash_profile\n```\n\n##### 3.使用nvm管理node\n* 查看远程node版本\n```nvm\nnvm ls-remote \n```\n* 安装远程线上node，nvm install 版本号\n```nvm\nnvm install 8.11.3\n```\n* 查看本地已安装版本，可以看到当前使用的版本是v8.10.0\n```\nyaodeMacBook-Pro:/ yao$ nvm ls\n->      v8.10.0\n        v8.11.3\ndefault -> 8.11.3 (-> v8.11.3)\nnode -> stable (-> v8.11.3) (default)\nstable -> 8.11 (-> v8.11.3) (default)\niojs -> N/A (default)\nlts/* -> lts/carbon (-> v8.11.3)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.14.3 (-> N/A)\nlts/carbon -> v8.11.3\n\n```\n* 使用一个版本\n```\nnvm use v8.11.3\n```\n##### 4.使用\n* 直接命令行交互式\n```\nyaodeMacBook-Pro:/ yao$ node\n> var a = 12\nundefined\n> var b = 22\nundefined\n> a+b\n34\n> \n```\n* 使用node xxx.js\n```\nyaodeMacBook-Pro:node yao$ node serverhello.js \nServer running at http://127.0.0.1:8888/\n```\n* 安装nodemon 自动监听js改动，自动重新执行\n```\nnpm install nodemon\n```\n##### 5.模块的使用\n* Node.js的模块系统采用CommonJS规范\n> CommonJS标准规定 \n> *  一个单独的文件就是一个模块\n> * 模块内将需要对外暴露的变量放到exports对象里，可以是任意对象，函数，数组等，未放到exports对象里的都是私有的。\n> * 使用require方法加载模块，即读取模块文件获得exports对象\n> * 默认每个.js文件都有一个module，可以使用module.exports暴露对外的模块方法\n> * 使用require引入模块时，模块路径后面的js文件建议不加后缀（.js）\n```javascript\n//默认每个js文件模块为一个空对象\nexports = module.exports = {}\n\n//可以使用,这种方式给扩展添加对外的属性\nexports.xxx = xxx;\n\n//也可以使用这种方式直接赋值对象,更换原有的对象\nmodule.exports = {xxx:xxx}\n\n//不要使用，直接改变该对象地址，会导致module.exports对象不会有任何改变。\nexports = {}\n```\n\n##### 6.全局变量和模块属性\n###### 全局变量\n* __dirname :当前模块所在目录路径\n* __filename : 当前模块的文件名称\n* console\n ###### 模块属性\n* module.id : 模块的唯一标识\n* module.loaded : 标记模块是否加载\n* module.parent :  引用模块的模块\n\n###### 模块分类\n* 核心模块：node.js内置的模块\n* 文件模块：自己写的模块和第三方提供的模块\n","source":"_posts/Node-js安装.md","raw":"---\ntitle: Node.js安装的标准姿势\ncover: 'http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3213.jpg'\ndate: 2019-05-19 23:01:59\nsubtitle: Node.js安装标准姿势\ncategories:\n- js\ntags:\n- js\n---\n### 1.卸载node.js\n- 为了对后续安装不造成影响，先卸载本地已经安装好的版本，如果是新的设备不需要，直接安装即可。推荐使用nvm管理多个版本的node.js。\n\nmac 完全卸载node.js [使用这位老兄的办法，好使。](https://blog.csdn.net/shiquanqq/article/details/78032943)\n\n##### homebrew安装的\n* 直接一条命令 \n```console\nbrew uninstall node\n```\n##### 官网下载pkg安装包的\n* 一条命令 \n```console\nsudo rm -rf /usr/local/{bin/{node,npm},lib/node_modules/npm,lib/node,share/man/*/node.*}\n```\n##### 其他\n* 编写脚本uninstallnode.sh\n\n```sh\n#!/bin/bash\nlsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \\\n| while read i; do\n  sudo rm /usr/local/${i}\ndone\nsudo rm -rf /usr/local/lib/node \\\n     /usr/local/lib/node_modules \\\n     /var/db/receipts/org.nodejs.*\n```\n\n* 修改文件权限 chmod 777 uninstallNodejs.sh \n在命令行执行\n\n### 2.安装[nvm](https://github.com/creationix/nvm)\n\n* 推荐使用这种方式\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n* 或者\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n* 安装完成，测试nvm 是否安装成功\n```nvm\nnvm --version\n```\n- 如果正常显示版本号，则说明安装成功，直接略过下面\n* 这种安装方式会自动添加环境变量，但是最好先检查一下环境变量是否配置正确\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n* 重新加载系统环境变量\n```\nsource ~/.bash_profile\n```\n\n##### 3.使用nvm管理node\n* 查看远程node版本\n```nvm\nnvm ls-remote \n```\n* 安装远程线上node，nvm install 版本号\n```nvm\nnvm install 8.11.3\n```\n* 查看本地已安装版本，可以看到当前使用的版本是v8.10.0\n```\nyaodeMacBook-Pro:/ yao$ nvm ls\n->      v8.10.0\n        v8.11.3\ndefault -> 8.11.3 (-> v8.11.3)\nnode -> stable (-> v8.11.3) (default)\nstable -> 8.11 (-> v8.11.3) (default)\niojs -> N/A (default)\nlts/* -> lts/carbon (-> v8.11.3)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.14.3 (-> N/A)\nlts/carbon -> v8.11.3\n\n```\n* 使用一个版本\n```\nnvm use v8.11.3\n```\n##### 4.使用\n* 直接命令行交互式\n```\nyaodeMacBook-Pro:/ yao$ node\n> var a = 12\nundefined\n> var b = 22\nundefined\n> a+b\n34\n> \n```\n* 使用node xxx.js\n```\nyaodeMacBook-Pro:node yao$ node serverhello.js \nServer running at http://127.0.0.1:8888/\n```\n* 安装nodemon 自动监听js改动，自动重新执行\n```\nnpm install nodemon\n```\n##### 5.模块的使用\n* Node.js的模块系统采用CommonJS规范\n> CommonJS标准规定 \n> *  一个单独的文件就是一个模块\n> * 模块内将需要对外暴露的变量放到exports对象里，可以是任意对象，函数，数组等，未放到exports对象里的都是私有的。\n> * 使用require方法加载模块，即读取模块文件获得exports对象\n> * 默认每个.js文件都有一个module，可以使用module.exports暴露对外的模块方法\n> * 使用require引入模块时，模块路径后面的js文件建议不加后缀（.js）\n```javascript\n//默认每个js文件模块为一个空对象\nexports = module.exports = {}\n\n//可以使用,这种方式给扩展添加对外的属性\nexports.xxx = xxx;\n\n//也可以使用这种方式直接赋值对象,更换原有的对象\nmodule.exports = {xxx:xxx}\n\n//不要使用，直接改变该对象地址，会导致module.exports对象不会有任何改变。\nexports = {}\n```\n\n##### 6.全局变量和模块属性\n###### 全局变量\n* __dirname :当前模块所在目录路径\n* __filename : 当前模块的文件名称\n* console\n ###### 模块属性\n* module.id : 模块的唯一标识\n* module.loaded : 标记模块是否加载\n* module.parent :  引用模块的模块\n\n###### 模块分类\n* 核心模块：node.js内置的模块\n* 文件模块：自己写的模块和第三方提供的模块\n","slug":"Node-js安装","published":1,"updated":"2019-05-19T15:04:06.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0qyyvp0006g6ofw5jwckwp","content":"<h3 id=\"1卸载nodejs\"><a class=\"markdownIt-Anchor\" href=\"#1卸载nodejs\"></a> 1.卸载node.js</h3>\n<ul>\n<li>为了对后续安装不造成影响，先卸载本地已经安装好的版本，如果是新的设备不需要，直接安装即可。推荐使用nvm管理多个版本的node.js。</li>\n</ul>\n<p>mac 完全卸载node.js <a href=\"https://blog.csdn.net/shiquanqq/article/details/78032943\" target=\"_blank\" rel=\"noopener\">使用这位老兄的办法，好使。</a></p>\n<h5 id=\"homebrew安装的\"><a class=\"markdownIt-Anchor\" href=\"#homebrew安装的\"></a> homebrew安装的</h5>\n<ul>\n<li>直接一条命令</li>\n</ul>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew uninstall node</span><br></pre></td></tr></table></figure>\n<h5 id=\"官网下载pkg安装包的\"><a class=\"markdownIt-Anchor\" href=\"#官网下载pkg安装包的\"></a> 官网下载pkg安装包的</h5>\n<ul>\n<li>一条命令</li>\n</ul>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h5>\n<ul>\n<li><a href=\"http://xn--uninstallnode-oj1vp42wu72dxfh.sh\" target=\"_blank\" rel=\"noopener\">编写脚本uninstallnode.sh</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \\</span><br><span class=\"line\">| <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> i; <span class=\"keyword\">do</span></span><br><span class=\"line\">  sudo rm /usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$&#123;i&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">sudo rm -rf /usr/<span class=\"built_in\">local</span>/lib/node \\</span><br><span class=\"line\">     /usr/<span class=\"built_in\">local</span>/lib/node_modules \\</span><br><span class=\"line\">     /var/db/receipts/org.nodejs.*</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改文件权限 chmod 777 <a href=\"http://uninstallNodejs.sh\" target=\"_blank\" rel=\"noopener\">uninstallNodejs.sh</a><br>\n在命令行执行</li>\n</ul>\n<h3 id=\"2安装nvm\"><a class=\"markdownIt-Anchor\" href=\"#2安装nvm\"></a> 2.安装<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a></h3>\n<ul>\n<li>推荐使用这种方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装完成，测试nvm 是否安装成功</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果正常显示版本号，则说明安装成功，直接略过下面</li>\n</ul>\n<ul>\n<li>这种安装方式会自动添加环境变量，但是最好先检查一下环境变量是否配置正确</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新加载系统环境变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h5 id=\"3使用nvm管理node\"><a class=\"markdownIt-Anchor\" href=\"#3使用nvm管理node\"></a> 3.使用nvm管理node</h5>\n<ul>\n<li>查看远程node版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装远程线上node，nvm install 版本号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8.11.3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地已安装版本，可以看到当前使用的版本是v8.10.0</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaodeMacBook-Pro:/ yao$ nvm ls</span><br><span class=\"line\">-&gt;      v8.10.0</span><br><span class=\"line\">        v8.11.3</span><br><span class=\"line\">default -&gt; 8.11.3 (-&gt; v8.11.3)</span><br><span class=\"line\">node -&gt; stable (-&gt; v8.11.3) (default)</span><br><span class=\"line\">stable -&gt; 8.11 (-&gt; v8.11.3) (default)</span><br><span class=\"line\">iojs -&gt; N/A (default)</span><br><span class=\"line\">lts/* -&gt; lts/carbon (-&gt; v8.11.3)</span><br><span class=\"line\">lts/argon -&gt; v4.9.1 (-&gt; N/A)</span><br><span class=\"line\">lts/boron -&gt; v6.14.3 (-&gt; N/A)</span><br><span class=\"line\">lts/carbon -&gt; v8.11.3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用一个版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use v8.11.3</span><br></pre></td></tr></table></figure>\n<h5 id=\"4使用\"><a class=\"markdownIt-Anchor\" href=\"#4使用\"></a> 4.使用</h5>\n<ul>\n<li>直接命令行交互式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaodeMacBook-Pro:/ yao$ node</span><br><span class=\"line\">&gt; var a = 12</span><br><span class=\"line\">undefined</span><br><span class=\"line\">&gt; var b = 22</span><br><span class=\"line\">undefined</span><br><span class=\"line\">&gt; a+b</span><br><span class=\"line\">34</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用node xxx.js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaodeMacBook-Pro:node yao$ node serverhello.js </span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装nodemon 自动监听js改动，自动重新执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install nodemon</span><br></pre></td></tr></table></figure>\n<h5 id=\"5模块的使用\"><a class=\"markdownIt-Anchor\" href=\"#5模块的使用\"></a> 5.模块的使用</h5>\n<ul>\n<li>Node.js的模块系统采用CommonJS规范</li>\n</ul>\n<blockquote>\n<p>CommonJS标准规定</p>\n<ul>\n<li>一个单独的文件就是一个模块</li>\n<li>模块内将需要对外暴露的变量放到exports对象里，可以是任意对象，函数，数组等，未放到exports对象里的都是私有的。</li>\n<li>使用require方法加载模块，即读取模块文件获得exports对象</li>\n<li>默认每个.js文件都有一个module，可以使用module.exports暴露对外的模块方法</li>\n<li>使用require引入模块时，模块路径后面的js文件建议不加后缀（.js）</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认每个js文件模块为一个空对象</span></span><br><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以使用,这种方式给扩展添加对外的属性</span></span><br><span class=\"line\">exports.xxx = xxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以使用这种方式直接赋值对象,更换原有的对象</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"attr\">xxx</span>:xxx&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不要使用，直接改变该对象地址，会导致module.exports对象不会有任何改变。</span></span><br><span class=\"line\">exports = &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6全局变量和模块属性\"><a class=\"markdownIt-Anchor\" href=\"#6全局变量和模块属性\"></a> 6.全局变量和模块属性</h5>\n<h6 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\"></a> 全局变量</h6>\n<ul>\n<li>__dirname :当前模块所在目录路径</li>\n<li>__filename : 当前模块的文件名称</li>\n<li>console</li>\n</ul>\n<h6 id=\"模块属性\"><a class=\"markdownIt-Anchor\" href=\"#模块属性\"></a> 模块属性</h6>\n<ul>\n<li><a href=\"http://module.id\" target=\"_blank\" rel=\"noopener\">module.id</a> : 模块的唯一标识</li>\n<li>module.loaded : 标记模块是否加载</li>\n<li>module.parent :  引用模块的模块</li>\n</ul>\n<h6 id=\"模块分类\"><a class=\"markdownIt-Anchor\" href=\"#模块分类\"></a> 模块分类</h6>\n<ul>\n<li>核心模块：node.js内置的模块</li>\n<li>文件模块：自己写的模块和第三方提供的模块</li>\n</ul>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<h3 id=\"1卸载nodejs\"><a class=\"markdownIt-Anchor\" href=\"#1卸载nodejs\"></a> 1.卸载node.js</h3>\n<ul>\n<li>为了对后续安装不造成影响，先卸载本地已经安装好的版本，如果是新的设备不需要，直接安装即可。推荐使用nvm管理多个版本的node.js。</li>\n</ul>\n<p>mac 完全卸载node.js <a href=\"https://blog.csdn.net/shiquanqq/article/details/78032943\" target=\"_blank\" rel=\"noopener\">使用这位老兄的办法，好使。</a></p>\n<h5 id=\"homebrew安装的\"><a class=\"markdownIt-Anchor\" href=\"#homebrew安装的\"></a> homebrew安装的</h5>\n<ul>\n<li>直接一条命令</li>\n</ul>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew uninstall node</span><br></pre></td></tr></table></figure>\n<h5 id=\"官网下载pkg安装包的\"><a class=\"markdownIt-Anchor\" href=\"#官网下载pkg安装包的\"></a> 官网下载pkg安装包的</h5>\n<ul>\n<li>一条命令</li>\n</ul>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h5>\n<ul>\n<li><a href=\"http://xn--uninstallnode-oj1vp42wu72dxfh.sh\" target=\"_blank\" rel=\"noopener\">编写脚本uninstallnode.sh</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \\</span><br><span class=\"line\">| <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> i; <span class=\"keyword\">do</span></span><br><span class=\"line\">  sudo rm /usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$&#123;i&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">sudo rm -rf /usr/<span class=\"built_in\">local</span>/lib/node \\</span><br><span class=\"line\">     /usr/<span class=\"built_in\">local</span>/lib/node_modules \\</span><br><span class=\"line\">     /var/db/receipts/org.nodejs.*</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改文件权限 chmod 777 <a href=\"http://uninstallNodejs.sh\" target=\"_blank\" rel=\"noopener\">uninstallNodejs.sh</a><br>\n在命令行执行</li>\n</ul>\n<h3 id=\"2安装nvm\"><a class=\"markdownIt-Anchor\" href=\"#2安装nvm\"></a> 2.安装<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a></h3>\n<ul>\n<li>推荐使用这种方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装完成，测试nvm 是否安装成功</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果正常显示版本号，则说明安装成功，直接略过下面</li>\n</ul>\n<ul>\n<li>这种安装方式会自动添加环境变量，但是最好先检查一下环境变量是否配置正确</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新加载系统环境变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h5 id=\"3使用nvm管理node\"><a class=\"markdownIt-Anchor\" href=\"#3使用nvm管理node\"></a> 3.使用nvm管理node</h5>\n<ul>\n<li>查看远程node版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装远程线上node，nvm install 版本号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8.11.3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地已安装版本，可以看到当前使用的版本是v8.10.0</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaodeMacBook-Pro:/ yao$ nvm ls</span><br><span class=\"line\">-&gt;      v8.10.0</span><br><span class=\"line\">        v8.11.3</span><br><span class=\"line\">default -&gt; 8.11.3 (-&gt; v8.11.3)</span><br><span class=\"line\">node -&gt; stable (-&gt; v8.11.3) (default)</span><br><span class=\"line\">stable -&gt; 8.11 (-&gt; v8.11.3) (default)</span><br><span class=\"line\">iojs -&gt; N/A (default)</span><br><span class=\"line\">lts/* -&gt; lts/carbon (-&gt; v8.11.3)</span><br><span class=\"line\">lts/argon -&gt; v4.9.1 (-&gt; N/A)</span><br><span class=\"line\">lts/boron -&gt; v6.14.3 (-&gt; N/A)</span><br><span class=\"line\">lts/carbon -&gt; v8.11.3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用一个版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use v8.11.3</span><br></pre></td></tr></table></figure>\n<h5 id=\"4使用\"><a class=\"markdownIt-Anchor\" href=\"#4使用\"></a> 4.使用</h5>\n<ul>\n<li>直接命令行交互式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaodeMacBook-Pro:/ yao$ node</span><br><span class=\"line\">&gt; var a = 12</span><br><span class=\"line\">undefined</span><br><span class=\"line\">&gt; var b = 22</span><br><span class=\"line\">undefined</span><br><span class=\"line\">&gt; a+b</span><br><span class=\"line\">34</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用node xxx.js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaodeMacBook-Pro:node yao$ node serverhello.js </span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装nodemon 自动监听js改动，自动重新执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install nodemon</span><br></pre></td></tr></table></figure>\n<h5 id=\"5模块的使用\"><a class=\"markdownIt-Anchor\" href=\"#5模块的使用\"></a> 5.模块的使用</h5>\n<ul>\n<li>Node.js的模块系统采用CommonJS规范</li>\n</ul>\n<blockquote>\n<p>CommonJS标准规定</p>\n<ul>\n<li>一个单独的文件就是一个模块</li>\n<li>模块内将需要对外暴露的变量放到exports对象里，可以是任意对象，函数，数组等，未放到exports对象里的都是私有的。</li>\n<li>使用require方法加载模块，即读取模块文件获得exports对象</li>\n<li>默认每个.js文件都有一个module，可以使用module.exports暴露对外的模块方法</li>\n<li>使用require引入模块时，模块路径后面的js文件建议不加后缀（.js）</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认每个js文件模块为一个空对象</span></span><br><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以使用,这种方式给扩展添加对外的属性</span></span><br><span class=\"line\">exports.xxx = xxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以使用这种方式直接赋值对象,更换原有的对象</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"attr\">xxx</span>:xxx&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不要使用，直接改变该对象地址，会导致module.exports对象不会有任何改变。</span></span><br><span class=\"line\">exports = &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6全局变量和模块属性\"><a class=\"markdownIt-Anchor\" href=\"#6全局变量和模块属性\"></a> 6.全局变量和模块属性</h5>\n<h6 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\"></a> 全局变量</h6>\n<ul>\n<li>__dirname :当前模块所在目录路径</li>\n<li>__filename : 当前模块的文件名称</li>\n<li>console</li>\n</ul>\n<h6 id=\"模块属性\"><a class=\"markdownIt-Anchor\" href=\"#模块属性\"></a> 模块属性</h6>\n<ul>\n<li><a href=\"http://module.id\" target=\"_blank\" rel=\"noopener\">module.id</a> : 模块的唯一标识</li>\n<li>module.loaded : 标记模块是否加载</li>\n<li>module.parent :  引用模块的模块</li>\n</ul>\n<h6 id=\"模块分类\"><a class=\"markdownIt-Anchor\" href=\"#模块分类\"></a> 模块分类</h6>\n<ul>\n<li>核心模块：node.js内置的模块</li>\n<li>文件模块：自己写的模块和第三方提供的模块</li>\n</ul>\n"},{"title":"iOS自动布局管理UIScrollview,并自适应软键盘弹出","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3820.jpg","date":"2019-05-19T14:58:01.000Z","subtitle":"iOS自动布局处理键盘弹出及UIScrollview","_content":"\n### iOS 自动布局管理scrollview\n\n- 个人整理笔记，包含完美软键盘弹出视图\n\n\n\n\n\n```objective-c\n#define MAS_SHORTHAND\n#define MAS_SHORTHAND_GLOBALS\n#define RGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]\n\n#define RGBAColor(r, g, b ,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]\n\n#define RandColor RGBColor(arc4random_uniform(255), arc4random_uniform(255), arc4random_uniform(255))\n\n#import \"ViewController.h\"\n#import \"Masonry.h\"\n\n@interface ViewController ()<UITextFieldDelegate,UIScrollViewDelegate>\n\n@property(nonatomic,strong) UIScrollView *mainScroll;\n\n@property(nonatomic,strong) UITextField *textField;\n\n@property(nonatomic,strong) UIView *countView;\n\n//@property(nonatomic,assign) BOOL keyBoardlsVisible;\n\n@property(nonatomic,assign) CGFloat insetBottom;\n@end\n\n@implementation ViewController\n\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    //  给 _keyBoardlsVisible 赋初值\n    //    _keyBoardlsVisible = NO;\n    self.insetBottom = 0;\n    \n    self.mainScroll = [UIScrollView new];\n    [self.mainScroll setBackgroundColor:[UIColor whiteColor]];\n    self.mainScroll.delegate = self;\n    [self.view addSubview:self.mainScroll];\n    [self.mainScroll makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    \n    \n#pragma mark--包含-个View的布局方式\n    //    self.countView = [[UIView alloc] init];\n    //    self.countView.backgroundColor = [UIColor greenColor];\n    //    [self.mainScroll addSubview:self.countView];\n    //\n    //    [self.countView makeConstraints:^(MASConstraintMaker *make) {\n    //这句其实是指定view填充contentSize\n    //        make.edges.equalTo(self.mainScroll);\n    //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键\n    //        make.width.equalTo(self.mainScroll);\n    //    }];\n    //由于上面没有指定contentSize高度，此时无法确定滚动高度\n    //\n    //    UIImageView *imageView1 = [UIImageView new];\n    //    [imageView1 setBackgroundColor:RandColor];\n    //    [self.countView addSubview:imageView1];\n    //    [imageView1 makeConstraints:^(MASConstraintMaker *make) {\n    //        make.top.equalTo(self.countView).offset(20);\n    //        make.left.right.mas_equalTo(self.countView);\n    //        make.height.mas_equalTo(900);\n    //    }];\n    //\n    //    UIImageView *imageView2 = [UIImageView new];\n    //    [imageView2 setBackgroundColor:RandColor];\n    //    [self.countView addSubview:imageView2];\n    //    [imageView2 makeConstraints:^(MASConstraintMaker *make) {\n    //        make.top.equalTo(imageView1.bottom).offset(20);\n    //        make.left.right.mas_equalTo(self.countView);\n    //        make.height.mas_equalTo(900);\n    //    }];\n    //\n    //    //当视图高度大于屏幕的时候scrollView就可以滚动，设置宽度的方法相同\n    //    [self.countView updateConstraints:^(MASConstraintMaker *make) {\n    //        // 设置容器视图的底部与要显示的子控件的底部相同，不然scrollView不能滚动\n    //        make.bottom.equalTo(imageView2);\n    //    }];\n    \n#pragma mark--包含多个View的布局方式\n    for (int i=0; i<40; i++) {\n        UITextField *textF = [UITextField new];\n        textF.delegate = self;//设置代理\n        textF.backgroundColor = RandColor;\n        [self.mainScroll addSubview:textF];\n        [textF makeConstraints:^(MASConstraintMaker *make) {\n            //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键\n            make.width.equalTo(self.mainScroll);\n            //左边对齐\n            make.left.equalTo(self.mainScroll);\n            //y轴计算\n            make.top.equalTo(self.mainScroll).offset(i*45);\n            //高度写死\n            make.height.equalTo(40);\n        }];\n        if(i==39){\n            //到最后一个View时候更新scollerView的contentSize高度也就是底部最多延伸到哪里\n            [self.mainScroll updateConstraints:^(MASConstraintMaker *make) {\n                make.bottom.equalTo(textF.bottom);\n            }];\n        }\n    }\n    \n    \n    \n    // 注册键盘通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillChangeFrameNotification:) name:UIKeyboardWillChangeFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHideNotification:) name:UIKeyboardWillHideNotification object:nil];\n}\n\n#pragma mark--代理方法键盘弹出\n-(void)textFieldDidBeginEditing:(UITextField *)textField\n{   //得到当前操作的view\n    self.textField = textField;\n}\n\n#pragma mark--代理方法键盘关闭\n-(void)textFieldDidEndEditing:(UITextField *)textField\n{   //得到当前操作的view\n    self.textField = textField;\n}\n\n#pragma mark--键盘弹出\n- (void)keyboardWillChangeFrameNotification:(NSNotification *)notification {\n    \n    // 获取键盘基本信息（动画时长与键盘高度）\n    NSDictionary *userInfo = [notification userInfo];\n    CGRect rect = [userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];\n    CGFloat keyboardHeight   = CGRectGetHeight(rect);\n    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n    //获得当前输入框的Y坐标\n    CGFloat inputY = self.textField.frame.origin.y+self.textField.frame.size.height;\n    //滑动距离\n    CGFloat offsetY = self.mainScroll.contentOffset.y;\n    //输入框距离屏幕底部\n    CGFloat inputJd = self.mainScroll.frame.size.height-(inputY-offsetY);\n    \n    NSLog(@\"键盘高度==%f,输入框距离底部距离==%f\",keyboardHeight,inputJd);\n    if(inputJd<keyboardHeight){\n        self.insetBottom = keyboardHeight-inputJd;\n        // 更新滚动条\n        [UIView animateWithDuration:keyboardDuration animations:^{\n            [self.mainScroll setContentOffset:CGPointMake(0, offsetY+self.insetBottom) animated:YES];\n        }];\n    }\n}\n#pragma mark--键盘隐藏\n- (void)keyboardWillHideNotification:(NSNotification *)notification {\n    \n    // 获得键盘动画时长\n    NSDictionary *userInfo   = [notification userInfo];\n    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n    //滑动距离\n    CGFloat offsetY = self.mainScroll.contentOffset.y;\n    // 更新滚动条\n    [UIView animateWithDuration:keyboardDuration animations:^{\n        [self.mainScroll setContentOffset:CGPointMake(0, offsetY-self.insetBottom) animated:YES];\n    }];\n    self.insetBottom = 0;\n    \n}\n#pragma mark--触摸事件\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {\n    [super touchesBegan:touches withEvent:event];\n    [self.view endEditing:YES];\n}\n\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{\n    [self.view endEditing:YES];\n}\n#pragma mark--移除通知\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n@end\n\n\n```\n","source":"_posts/iOS自动布局管理UIScrollview-并自适应软键盘弹出.md","raw":"---\ntitle: 'iOS自动布局管理UIScrollview,并自适应软键盘弹出'\ncover: 'http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3820.jpg'\ndate: 2019-05-19 22:58:01\nsubtitle: iOS自动布局处理键盘弹出及UIScrollview\ncategories:\n- iOS\ntags:\n- iOS\n- 自动布局\n---\n\n### iOS 自动布局管理scrollview\n\n- 个人整理笔记，包含完美软键盘弹出视图\n\n\n\n\n\n```objective-c\n#define MAS_SHORTHAND\n#define MAS_SHORTHAND_GLOBALS\n#define RGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]\n\n#define RGBAColor(r, g, b ,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]\n\n#define RandColor RGBColor(arc4random_uniform(255), arc4random_uniform(255), arc4random_uniform(255))\n\n#import \"ViewController.h\"\n#import \"Masonry.h\"\n\n@interface ViewController ()<UITextFieldDelegate,UIScrollViewDelegate>\n\n@property(nonatomic,strong) UIScrollView *mainScroll;\n\n@property(nonatomic,strong) UITextField *textField;\n\n@property(nonatomic,strong) UIView *countView;\n\n//@property(nonatomic,assign) BOOL keyBoardlsVisible;\n\n@property(nonatomic,assign) CGFloat insetBottom;\n@end\n\n@implementation ViewController\n\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    //  给 _keyBoardlsVisible 赋初值\n    //    _keyBoardlsVisible = NO;\n    self.insetBottom = 0;\n    \n    self.mainScroll = [UIScrollView new];\n    [self.mainScroll setBackgroundColor:[UIColor whiteColor]];\n    self.mainScroll.delegate = self;\n    [self.view addSubview:self.mainScroll];\n    [self.mainScroll makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view);\n    }];\n    \n    \n#pragma mark--包含-个View的布局方式\n    //    self.countView = [[UIView alloc] init];\n    //    self.countView.backgroundColor = [UIColor greenColor];\n    //    [self.mainScroll addSubview:self.countView];\n    //\n    //    [self.countView makeConstraints:^(MASConstraintMaker *make) {\n    //这句其实是指定view填充contentSize\n    //        make.edges.equalTo(self.mainScroll);\n    //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键\n    //        make.width.equalTo(self.mainScroll);\n    //    }];\n    //由于上面没有指定contentSize高度，此时无法确定滚动高度\n    //\n    //    UIImageView *imageView1 = [UIImageView new];\n    //    [imageView1 setBackgroundColor:RandColor];\n    //    [self.countView addSubview:imageView1];\n    //    [imageView1 makeConstraints:^(MASConstraintMaker *make) {\n    //        make.top.equalTo(self.countView).offset(20);\n    //        make.left.right.mas_equalTo(self.countView);\n    //        make.height.mas_equalTo(900);\n    //    }];\n    //\n    //    UIImageView *imageView2 = [UIImageView new];\n    //    [imageView2 setBackgroundColor:RandColor];\n    //    [self.countView addSubview:imageView2];\n    //    [imageView2 makeConstraints:^(MASConstraintMaker *make) {\n    //        make.top.equalTo(imageView1.bottom).offset(20);\n    //        make.left.right.mas_equalTo(self.countView);\n    //        make.height.mas_equalTo(900);\n    //    }];\n    //\n    //    //当视图高度大于屏幕的时候scrollView就可以滚动，设置宽度的方法相同\n    //    [self.countView updateConstraints:^(MASConstraintMaker *make) {\n    //        // 设置容器视图的底部与要显示的子控件的底部相同，不然scrollView不能滚动\n    //        make.bottom.equalTo(imageView2);\n    //    }];\n    \n#pragma mark--包含多个View的布局方式\n    for (int i=0; i<40; i++) {\n        UITextField *textF = [UITextField new];\n        textF.delegate = self;//设置代理\n        textF.backgroundColor = RandColor;\n        [self.mainScroll addSubview:textF];\n        [textF makeConstraints:^(MASConstraintMaker *make) {\n            //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键\n            make.width.equalTo(self.mainScroll);\n            //左边对齐\n            make.left.equalTo(self.mainScroll);\n            //y轴计算\n            make.top.equalTo(self.mainScroll).offset(i*45);\n            //高度写死\n            make.height.equalTo(40);\n        }];\n        if(i==39){\n            //到最后一个View时候更新scollerView的contentSize高度也就是底部最多延伸到哪里\n            [self.mainScroll updateConstraints:^(MASConstraintMaker *make) {\n                make.bottom.equalTo(textF.bottom);\n            }];\n        }\n    }\n    \n    \n    \n    // 注册键盘通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillChangeFrameNotification:) name:UIKeyboardWillChangeFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHideNotification:) name:UIKeyboardWillHideNotification object:nil];\n}\n\n#pragma mark--代理方法键盘弹出\n-(void)textFieldDidBeginEditing:(UITextField *)textField\n{   //得到当前操作的view\n    self.textField = textField;\n}\n\n#pragma mark--代理方法键盘关闭\n-(void)textFieldDidEndEditing:(UITextField *)textField\n{   //得到当前操作的view\n    self.textField = textField;\n}\n\n#pragma mark--键盘弹出\n- (void)keyboardWillChangeFrameNotification:(NSNotification *)notification {\n    \n    // 获取键盘基本信息（动画时长与键盘高度）\n    NSDictionary *userInfo = [notification userInfo];\n    CGRect rect = [userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];\n    CGFloat keyboardHeight   = CGRectGetHeight(rect);\n    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n    //获得当前输入框的Y坐标\n    CGFloat inputY = self.textField.frame.origin.y+self.textField.frame.size.height;\n    //滑动距离\n    CGFloat offsetY = self.mainScroll.contentOffset.y;\n    //输入框距离屏幕底部\n    CGFloat inputJd = self.mainScroll.frame.size.height-(inputY-offsetY);\n    \n    NSLog(@\"键盘高度==%f,输入框距离底部距离==%f\",keyboardHeight,inputJd);\n    if(inputJd<keyboardHeight){\n        self.insetBottom = keyboardHeight-inputJd;\n        // 更新滚动条\n        [UIView animateWithDuration:keyboardDuration animations:^{\n            [self.mainScroll setContentOffset:CGPointMake(0, offsetY+self.insetBottom) animated:YES];\n        }];\n    }\n}\n#pragma mark--键盘隐藏\n- (void)keyboardWillHideNotification:(NSNotification *)notification {\n    \n    // 获得键盘动画时长\n    NSDictionary *userInfo   = [notification userInfo];\n    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];\n    //滑动距离\n    CGFloat offsetY = self.mainScroll.contentOffset.y;\n    // 更新滚动条\n    [UIView animateWithDuration:keyboardDuration animations:^{\n        [self.mainScroll setContentOffset:CGPointMake(0, offsetY-self.insetBottom) animated:YES];\n    }];\n    self.insetBottom = 0;\n    \n}\n#pragma mark--触摸事件\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {\n    [super touchesBegan:touches withEvent:event];\n    [self.view endEditing:YES];\n}\n\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{\n    [self.view endEditing:YES];\n}\n#pragma mark--移除通知\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n@end\n\n\n```\n","slug":"iOS自动布局管理UIScrollview-并自适应软键盘弹出","published":1,"updated":"2019-05-21T13:12:14.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0qyyvr0008g6of8lj3bi9l","content":"<h3 id=\"ios-自动布局管理scrollview\"><a class=\"markdownIt-Anchor\" href=\"#ios-自动布局管理scrollview\"></a> iOS 自动布局管理scrollview</h3>\n<ul>\n<li>个人整理笔记，包含完美软键盘弹出视图</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MAS_SHORTHAND</span><br><span class=\"line\">#define MAS_SHORTHAND_GLOBALS</span><br><span class=\"line\">#define RGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]</span><br><span class=\"line\"></span><br><span class=\"line\">#define RGBAColor(r, g, b ,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]</span><br><span class=\"line\"></span><br><span class=\"line\">#define RandColor RGBColor(arc4random_uniform(255), arc4random_uniform(255), arc4random_uniform(255))</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\">#import &quot;Masonry.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()&lt;UITextFieldDelegate,UIScrollViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIScrollView *mainScroll;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UITextField *textField;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIView *countView;</span><br><span class=\"line\"></span><br><span class=\"line\">//@property(nonatomic,assign) BOOL keyBoardlsVisible;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign) CGFloat insetBottom;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    //  给 _keyBoardlsVisible 赋初值</span><br><span class=\"line\">    //    _keyBoardlsVisible = NO;</span><br><span class=\"line\">    self.insetBottom = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.mainScroll = [UIScrollView new];</span><br><span class=\"line\">    [self.mainScroll setBackgroundColor:[UIColor whiteColor]];</span><br><span class=\"line\">    self.mainScroll.delegate = self;</span><br><span class=\"line\">    [self.view addSubview:self.mainScroll];</span><br><span class=\"line\">    [self.mainScroll makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        make.edges.equalTo(self.view);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">#pragma mark--包含-个View的布局方式</span><br><span class=\"line\">    //    self.countView = [[UIView alloc] init];</span><br><span class=\"line\">    //    self.countView.backgroundColor = [UIColor greenColor];</span><br><span class=\"line\">    //    [self.mainScroll addSubview:self.countView];</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    [self.countView makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //这句其实是指定view填充contentSize</span><br><span class=\"line\">    //        make.edges.equalTo(self.mainScroll);</span><br><span class=\"line\">    //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键</span><br><span class=\"line\">    //        make.width.equalTo(self.mainScroll);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    //由于上面没有指定contentSize高度，此时无法确定滚动高度</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    UIImageView *imageView1 = [UIImageView new];</span><br><span class=\"line\">    //    [imageView1 setBackgroundColor:RandColor];</span><br><span class=\"line\">    //    [self.countView addSubview:imageView1];</span><br><span class=\"line\">    //    [imageView1 makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //        make.top.equalTo(self.countView).offset(20);</span><br><span class=\"line\">    //        make.left.right.mas_equalTo(self.countView);</span><br><span class=\"line\">    //        make.height.mas_equalTo(900);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    UIImageView *imageView2 = [UIImageView new];</span><br><span class=\"line\">    //    [imageView2 setBackgroundColor:RandColor];</span><br><span class=\"line\">    //    [self.countView addSubview:imageView2];</span><br><span class=\"line\">    //    [imageView2 makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //        make.top.equalTo(imageView1.bottom).offset(20);</span><br><span class=\"line\">    //        make.left.right.mas_equalTo(self.countView);</span><br><span class=\"line\">    //        make.height.mas_equalTo(900);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    //当视图高度大于屏幕的时候scrollView就可以滚动，设置宽度的方法相同</span><br><span class=\"line\">    //    [self.countView updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //        // 设置容器视图的底部与要显示的子控件的底部相同，不然scrollView不能滚动</span><br><span class=\"line\">    //        make.bottom.equalTo(imageView2);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">#pragma mark--包含多个View的布局方式</span><br><span class=\"line\">    for (int i=0; i&lt;40; i++) &#123;</span><br><span class=\"line\">        UITextField *textF = [UITextField new];</span><br><span class=\"line\">        textF.delegate = self;//设置代理</span><br><span class=\"line\">        textF.backgroundColor = RandColor;</span><br><span class=\"line\">        [self.mainScroll addSubview:textF];</span><br><span class=\"line\">        [textF makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">            //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键</span><br><span class=\"line\">            make.width.equalTo(self.mainScroll);</span><br><span class=\"line\">            //左边对齐</span><br><span class=\"line\">            make.left.equalTo(self.mainScroll);</span><br><span class=\"line\">            //y轴计算</span><br><span class=\"line\">            make.top.equalTo(self.mainScroll).offset(i*45);</span><br><span class=\"line\">            //高度写死</span><br><span class=\"line\">            make.height.equalTo(40);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        if(i==39)&#123;</span><br><span class=\"line\">            //到最后一个View时候更新scollerView的contentSize高度也就是底部最多延伸到哪里</span><br><span class=\"line\">            [self.mainScroll updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">                make.bottom.equalTo(textF.bottom);</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 注册键盘通知</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillChangeFrameNotification:) name:UIKeyboardWillChangeFrameNotification object:nil];</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHideNotification:) name:UIKeyboardWillHideNotification object:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark--代理方法键盘弹出</span><br><span class=\"line\">-(void)textFieldDidBeginEditing:(UITextField *)textField</span><br><span class=\"line\">&#123;   //得到当前操作的view</span><br><span class=\"line\">    self.textField = textField;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark--代理方法键盘关闭</span><br><span class=\"line\">-(void)textFieldDidEndEditing:(UITextField *)textField</span><br><span class=\"line\">&#123;   //得到当前操作的view</span><br><span class=\"line\">    self.textField = textField;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark--键盘弹出</span><br><span class=\"line\">- (void)keyboardWillChangeFrameNotification:(NSNotification *)notification &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 获取键盘基本信息（动画时长与键盘高度）</span><br><span class=\"line\">    NSDictionary *userInfo = [notification userInfo];</span><br><span class=\"line\">    CGRect rect = [userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];</span><br><span class=\"line\">    CGFloat keyboardHeight   = CGRectGetHeight(rect);</span><br><span class=\"line\">    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\">    //获得当前输入框的Y坐标</span><br><span class=\"line\">    CGFloat inputY = self.textField.frame.origin.y+self.textField.frame.size.height;</span><br><span class=\"line\">    //滑动距离</span><br><span class=\"line\">    CGFloat offsetY = self.mainScroll.contentOffset.y;</span><br><span class=\"line\">    //输入框距离屏幕底部</span><br><span class=\"line\">    CGFloat inputJd = self.mainScroll.frame.size.height-(inputY-offsetY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;键盘高度==%f,输入框距离底部距离==%f&quot;,keyboardHeight,inputJd);</span><br><span class=\"line\">    if(inputJd&lt;keyboardHeight)&#123;</span><br><span class=\"line\">        self.insetBottom = keyboardHeight-inputJd;</span><br><span class=\"line\">        // 更新滚动条</span><br><span class=\"line\">        [UIView animateWithDuration:keyboardDuration animations:^&#123;</span><br><span class=\"line\">            [self.mainScroll setContentOffset:CGPointMake(0, offsetY+self.insetBottom) animated:YES];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark--键盘隐藏</span><br><span class=\"line\">- (void)keyboardWillHideNotification:(NSNotification *)notification &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 获得键盘动画时长</span><br><span class=\"line\">    NSDictionary *userInfo   = [notification userInfo];</span><br><span class=\"line\">    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\">    //滑动距离</span><br><span class=\"line\">    CGFloat offsetY = self.mainScroll.contentOffset.y;</span><br><span class=\"line\">    // 更新滚动条</span><br><span class=\"line\">    [UIView animateWithDuration:keyboardDuration animations:^&#123;</span><br><span class=\"line\">        [self.mainScroll setContentOffset:CGPointMake(0, offsetY-self.insetBottom) animated:YES];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    self.insetBottom = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark--触摸事件</span><br><span class=\"line\">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event &#123;</span><br><span class=\"line\">    [super touchesBegan:touches withEvent:event];</span><br><span class=\"line\">    [self.view endEditing:YES];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\">    [self.view endEditing:YES];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark--移除通知</span><br><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<h3 id=\"ios-自动布局管理scrollview\"><a class=\"markdownIt-Anchor\" href=\"#ios-自动布局管理scrollview\"></a> iOS 自动布局管理scrollview</h3>\n<ul>\n<li>个人整理笔记，包含完美软键盘弹出视图</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MAS_SHORTHAND</span><br><span class=\"line\">#define MAS_SHORTHAND_GLOBALS</span><br><span class=\"line\">#define RGBColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]</span><br><span class=\"line\"></span><br><span class=\"line\">#define RGBAColor(r, g, b ,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]</span><br><span class=\"line\"></span><br><span class=\"line\">#define RandColor RGBColor(arc4random_uniform(255), arc4random_uniform(255), arc4random_uniform(255))</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\">#import &quot;Masonry.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()&lt;UITextFieldDelegate,UIScrollViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIScrollView *mainScroll;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UITextField *textField;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIView *countView;</span><br><span class=\"line\"></span><br><span class=\"line\">//@property(nonatomic,assign) BOOL keyBoardlsVisible;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign) CGFloat insetBottom;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    //  给 _keyBoardlsVisible 赋初值</span><br><span class=\"line\">    //    _keyBoardlsVisible = NO;</span><br><span class=\"line\">    self.insetBottom = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.mainScroll = [UIScrollView new];</span><br><span class=\"line\">    [self.mainScroll setBackgroundColor:[UIColor whiteColor]];</span><br><span class=\"line\">    self.mainScroll.delegate = self;</span><br><span class=\"line\">    [self.view addSubview:self.mainScroll];</span><br><span class=\"line\">    [self.mainScroll makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">        make.edges.equalTo(self.view);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">#pragma mark--包含-个View的布局方式</span><br><span class=\"line\">    //    self.countView = [[UIView alloc] init];</span><br><span class=\"line\">    //    self.countView.backgroundColor = [UIColor greenColor];</span><br><span class=\"line\">    //    [self.mainScroll addSubview:self.countView];</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    [self.countView makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //这句其实是指定view填充contentSize</span><br><span class=\"line\">    //        make.edges.equalTo(self.mainScroll);</span><br><span class=\"line\">    //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键</span><br><span class=\"line\">    //        make.width.equalTo(self.mainScroll);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    //由于上面没有指定contentSize高度，此时无法确定滚动高度</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    UIImageView *imageView1 = [UIImageView new];</span><br><span class=\"line\">    //    [imageView1 setBackgroundColor:RandColor];</span><br><span class=\"line\">    //    [self.countView addSubview:imageView1];</span><br><span class=\"line\">    //    [imageView1 makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //        make.top.equalTo(self.countView).offset(20);</span><br><span class=\"line\">    //        make.left.right.mas_equalTo(self.countView);</span><br><span class=\"line\">    //        make.height.mas_equalTo(900);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    UIImageView *imageView2 = [UIImageView new];</span><br><span class=\"line\">    //    [imageView2 setBackgroundColor:RandColor];</span><br><span class=\"line\">    //    [self.countView addSubview:imageView2];</span><br><span class=\"line\">    //    [imageView2 makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //        make.top.equalTo(imageView1.bottom).offset(20);</span><br><span class=\"line\">    //        make.left.right.mas_equalTo(self.countView);</span><br><span class=\"line\">    //        make.height.mas_equalTo(900);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    //</span><br><span class=\"line\">    //    //当视图高度大于屏幕的时候scrollView就可以滚动，设置宽度的方法相同</span><br><span class=\"line\">    //    [self.countView updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    //        // 设置容器视图的底部与要显示的子控件的底部相同，不然scrollView不能滚动</span><br><span class=\"line\">    //        make.bottom.equalTo(imageView2);</span><br><span class=\"line\">    //    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">#pragma mark--包含多个View的布局方式</span><br><span class=\"line\">    for (int i=0; i&lt;40; i++) &#123;</span><br><span class=\"line\">        UITextField *textF = [UITextField new];</span><br><span class=\"line\">        textF.delegate = self;//设置代理</span><br><span class=\"line\">        textF.backgroundColor = RandColor;</span><br><span class=\"line\">        [self.mainScroll addSubview:textF];</span><br><span class=\"line\">        [textF makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">            //确定宽度等于滚动条宽度，也是确定contentSize宽度的关键</span><br><span class=\"line\">            make.width.equalTo(self.mainScroll);</span><br><span class=\"line\">            //左边对齐</span><br><span class=\"line\">            make.left.equalTo(self.mainScroll);</span><br><span class=\"line\">            //y轴计算</span><br><span class=\"line\">            make.top.equalTo(self.mainScroll).offset(i*45);</span><br><span class=\"line\">            //高度写死</span><br><span class=\"line\">            make.height.equalTo(40);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        if(i==39)&#123;</span><br><span class=\"line\">            //到最后一个View时候更新scollerView的contentSize高度也就是底部最多延伸到哪里</span><br><span class=\"line\">            [self.mainScroll updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">                make.bottom.equalTo(textF.bottom);</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 注册键盘通知</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillChangeFrameNotification:) name:UIKeyboardWillChangeFrameNotification object:nil];</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHideNotification:) name:UIKeyboardWillHideNotification object:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark--代理方法键盘弹出</span><br><span class=\"line\">-(void)textFieldDidBeginEditing:(UITextField *)textField</span><br><span class=\"line\">&#123;   //得到当前操作的view</span><br><span class=\"line\">    self.textField = textField;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark--代理方法键盘关闭</span><br><span class=\"line\">-(void)textFieldDidEndEditing:(UITextField *)textField</span><br><span class=\"line\">&#123;   //得到当前操作的view</span><br><span class=\"line\">    self.textField = textField;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark--键盘弹出</span><br><span class=\"line\">- (void)keyboardWillChangeFrameNotification:(NSNotification *)notification &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 获取键盘基本信息（动画时长与键盘高度）</span><br><span class=\"line\">    NSDictionary *userInfo = [notification userInfo];</span><br><span class=\"line\">    CGRect rect = [userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];</span><br><span class=\"line\">    CGFloat keyboardHeight   = CGRectGetHeight(rect);</span><br><span class=\"line\">    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\">    //获得当前输入框的Y坐标</span><br><span class=\"line\">    CGFloat inputY = self.textField.frame.origin.y+self.textField.frame.size.height;</span><br><span class=\"line\">    //滑动距离</span><br><span class=\"line\">    CGFloat offsetY = self.mainScroll.contentOffset.y;</span><br><span class=\"line\">    //输入框距离屏幕底部</span><br><span class=\"line\">    CGFloat inputJd = self.mainScroll.frame.size.height-(inputY-offsetY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSLog(@&quot;键盘高度==%f,输入框距离底部距离==%f&quot;,keyboardHeight,inputJd);</span><br><span class=\"line\">    if(inputJd&lt;keyboardHeight)&#123;</span><br><span class=\"line\">        self.insetBottom = keyboardHeight-inputJd;</span><br><span class=\"line\">        // 更新滚动条</span><br><span class=\"line\">        [UIView animateWithDuration:keyboardDuration animations:^&#123;</span><br><span class=\"line\">            [self.mainScroll setContentOffset:CGPointMake(0, offsetY+self.insetBottom) animated:YES];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark--键盘隐藏</span><br><span class=\"line\">- (void)keyboardWillHideNotification:(NSNotification *)notification &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 获得键盘动画时长</span><br><span class=\"line\">    NSDictionary *userInfo   = [notification userInfo];</span><br><span class=\"line\">    CGFloat keyboardDuration = [userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\">    //滑动距离</span><br><span class=\"line\">    CGFloat offsetY = self.mainScroll.contentOffset.y;</span><br><span class=\"line\">    // 更新滚动条</span><br><span class=\"line\">    [UIView animateWithDuration:keyboardDuration animations:^&#123;</span><br><span class=\"line\">        [self.mainScroll setContentOffset:CGPointMake(0, offsetY-self.insetBottom) animated:YES];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    self.insetBottom = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark--触摸事件</span><br><span class=\"line\">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event &#123;</span><br><span class=\"line\">    [super touchesBegan:touches withEvent:event];</span><br><span class=\"line\">    [self.view endEditing:YES];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\">    [self.view endEditing:YES];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark--移除通知</span><br><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n"},{"title":"mac电脑开启文件共享服务","date":"2019-05-19T14:38:10.000Z","subtitle":"MacOS 快速分享本地文件到局域网","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3235.jpg","_content":"使用mac自带的Python 2.7命令快速共享本地文件.操作步骤\n- 1.打开电脑终端\n  ![屏幕快照 2019-03-21 上午11.45.20.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-6460fb75db8ad0d6.png)\n\n- 2.进入你想共享的文件夹目录\n![屏幕快照 2019-03-21 上午11.47.52.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-785157544aa83b4f.png)\n```\n 输入 cd /Users/用户/Desktop/ 进入桌面文件夹，共享桌面文件 \n```\n\n- 3.输入命令\n```\npython -m SimpleHTTPServer\n```\n![屏幕快照 2019-03-21 下午12.30.27.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-eb5707509e383e29.png)\n> 表示在本机的8000端口号开启服务\n\n- 4.在同一个局域网下的任意浏览器输入ip+端口进行访问\n> 本机IP 按住option 点击wifi图标即可查看IP地址\n![屏幕快照 2019-03-21 下午12.34.24.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-c090d92f3af55725.png)\n\n- 5.在另外一台电脑打开该地址\n```\nhttp://10.88.10.141:8000\n```\n","source":"_posts/mac电脑开启文件共享服务.md","raw":"---\ntitle: mac电脑开启文件共享服务\ndate: 2019-05-19 22:38:10\nsubtitle: MacOS 快速分享本地文件到局域网\ncategories:\n- 劈柴\ntags:\n- Python2.7\n- macOS\ncover: http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3235.jpg\n---\n使用mac自带的Python 2.7命令快速共享本地文件.操作步骤\n- 1.打开电脑终端\n  ![屏幕快照 2019-03-21 上午11.45.20.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-6460fb75db8ad0d6.png)\n\n- 2.进入你想共享的文件夹目录\n![屏幕快照 2019-03-21 上午11.47.52.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-785157544aa83b4f.png)\n```\n 输入 cd /Users/用户/Desktop/ 进入桌面文件夹，共享桌面文件 \n```\n\n- 3.输入命令\n```\npython -m SimpleHTTPServer\n```\n![屏幕快照 2019-03-21 下午12.30.27.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-eb5707509e383e29.png)\n> 表示在本机的8000端口号开启服务\n\n- 4.在同一个局域网下的任意浏览器输入ip+端口进行访问\n> 本机IP 按住option 点击wifi图标即可查看IP地址\n![屏幕快照 2019-03-21 下午12.34.24.png](http://prr6elh1d.sabkt.gdipper.com/static/images/mac电脑文件共享/2975942-c090d92f3af55725.png)\n\n- 5.在另外一台电脑打开该地址\n```\nhttp://10.88.10.141:8000\n```\n","slug":"mac电脑开启文件共享服务","published":1,"updated":"2019-05-19T14:49:19.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0qyyvs000ag6of6ntihf2w","content":"<p>使用mac自带的Python 2.7命令快速共享本地文件.操作步骤</p>\n<ul>\n<li>\n<p>1.打开电脑终端<br>\n<img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-6460fb75db8ad0d6.png\" alt=\"屏幕快照 2019-03-21 上午11.45.20.png\"></p>\n</li>\n<li>\n<p>2.进入你想共享的文件夹目录<br>\n<img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-785157544aa83b4f.png\" alt=\"屏幕快照 2019-03-21 上午11.47.52.png\"></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入 cd /Users/用户/Desktop/ 进入桌面文件夹，共享桌面文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.输入命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-eb5707509e383e29.png\" alt=\"屏幕快照 2019-03-21 下午12.30.27.png\"></p>\n<blockquote>\n<p>表示在本机的8000端口号开启服务</p>\n</blockquote>\n<ul>\n<li>4.在同一个局域网下的任意浏览器输入ip+端口进行访问</li>\n</ul>\n<blockquote>\n<p>本机IP 按住option 点击wifi图标即可查看IP地址<br>\n<img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-c090d92f3af55725.png\" alt=\"屏幕快照 2019-03-21 下午12.34.24.png\"></p>\n</blockquote>\n<ul>\n<li>5.在另外一台电脑打开该地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.88.10.141:8000</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<p>使用mac自带的Python 2.7命令快速共享本地文件.操作步骤</p>\n<ul>\n<li>\n<p>1.打开电脑终端<br>\n<img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-6460fb75db8ad0d6.png\" alt=\"屏幕快照 2019-03-21 上午11.45.20.png\"></p>\n</li>\n<li>\n<p>2.进入你想共享的文件夹目录<br>\n<img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-785157544aa83b4f.png\" alt=\"屏幕快照 2019-03-21 上午11.47.52.png\"></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入 cd /Users/用户/Desktop/ 进入桌面文件夹，共享桌面文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.输入命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-eb5707509e383e29.png\" alt=\"屏幕快照 2019-03-21 下午12.30.27.png\"></p>\n<blockquote>\n<p>表示在本机的8000端口号开启服务</p>\n</blockquote>\n<ul>\n<li>4.在同一个局域网下的任意浏览器输入ip+端口进行访问</li>\n</ul>\n<blockquote>\n<p>本机IP 按住option 点击wifi图标即可查看IP地址<br>\n<img src=\"http://prr6elh1d.sabkt.gdipper.com/static/images/mac%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/2975942-c090d92f3af55725.png\" alt=\"屏幕快照 2019-03-21 下午12.34.24.png\"></p>\n</blockquote>\n<ul>\n<li>5.在另外一台电脑打开该地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.88.10.141:8000</span><br></pre></td></tr></table></figure>\n"},{"title":"缓存腾讯视频文件","date":"2019-05-19T12:44:48.000Z","subtitle":"macOS 获取腾讯视频缓存视频文件并转为mp4","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3156.jpg","_content":"> 事件起因\n\n##### 最近没网，前两天去朋友那缓存了几部电影，1080p高清视频下载速度刷刷的。拿回来播放的时候就在想，我把视频缓存到电脑了，那我能找到吗？视频是以mp4文件缓存的吗？我能不能拿到腾讯VIP会员的缓存视频？能不能保存高清mp4？\n\n> 事件经过\n\n##### 拿着这些疑问，我就扒拉我电脑(macOS 腾讯视频mac版1.8.2)里面的缓存文件，发现视频缓存在👇这个目录\n\n```\n/Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download\n```\n\n##### 打开里面的video文件夹一看，我滴个神。\n\n> ad\t\t\tg00208rhr0m.320092.hls\tl0019sl1ggv.321003.hls\n> c00226jie90.321003.hls\tj0022vz0heu.321003.hls\n\n##### 看文件夹结尾的名字hls \\(^o^)/~ ，再打开翻到最里面，发现里面的文件是.ts 而且可以正常播放，注意可以正常播放的哦，😏，（我还以为腾讯会自定义视频头信息，自定义播放器。看到这就放心了）直接使用ffmpeg合并为一个视频就行。\n\n##### 再然后搬出Python大宝剑，开始劈柴。\n\n```python\nimport os,sys\nimport logging\nfrom ffmpy import FFmpeg\nfrom natsort import natsorted\n\nlogger = logging.getLogger(__name__)\n\n\ndef hls_dir_to_mp4(in_path_dir, out_path_file):\n    \"\"\"\n    将hls文件夹里面分片的视频转化为单个MP4文件\n    ffmpeg -i \"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc out.mp4\n    :param in_path:\n    :param out_path:\n    :return:\n    \"\"\"\n    # 获取\"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\"列表参数\n    out_files = []\n    for dir in natsorted([val for val in os.listdir(in_path_dir) if val.startswith(in_path_dir.split(\"/\")[-1])]):\n        dirPath = os.path.join(in_path_dir, dir)\n        print(dirPath)\n\n        for root, dirs, files in os.walk(dirPath):\n            files = natsorted(files)\n            for file in files:\n                if os.path.splitext(file)[1] == '.ts':\n                    # 拼接成完整路径\n                    filePath = os.path.join(root, file)\n                    out_files.append(filePath)\n\n    cmd = '|'.join(out_files)\n    print(out_files)\n    cmd = 'concat:' + \"\\\"\" + cmd + \"\\\"\"\n    cmd = 'ffmpeg -i ' + cmd + ' -acodec copy -vcodec copy -absf aac_adtstoasc ' + out_path_file\n    print(execCmd(cmd))\n\n\ndef videoCurv():\n    \"\"\"\n    转换视频格式\n    :return:\n    \"\"\"\n    # 转换input.mp4 为 output.avi\n    FFmpeg(inputs={in_path: None}, outputs={out_path: None}).run()\n\n\ndef execCmd(cmd):\n    \"\"\"\n    执行计算命令时间\n    \"\"\"\n    r = os.popen(cmd)\n    text = r.read().strip()\n    r.close()\n    return text\n\n\nif __name__ == '__main__':\n    print(sys.argv)\n    if len(sys.argv) == 3:\n        hls_dir_to_mp4(sys.argv[1], sys.argv[2])\n    elif len(sys.argv) > 1:\n        hls_dir_to_mp4(sys.argv[1], 'tmp.mp4')\n    else:\n        print('请输入视频所在目录path')\n    # hls_dir_to_mp4(\n    #     in_path_dir='/Users/bunny/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls',\n    #     out_path_file='1.mp4');\n\n```\n\n\n\n### 打完收工\n\n代码已上传[GitHub](https://github.com/yaooort/videoCreate)\n\n### 使用方法\n\n> **1.安装ffmpeg**\n>\n> - ``` brew install ffmpeg```\n\n> **2.[安装Python3](https://www.python.org/downloads/)**\n>\n> **3.安装pipenv**\n>\n> - ```pip install pipenv```\n>\n> **4.创建虚拟环境并安装依赖包**\n>\n> - ``` pipenv shell```\n>\n> **5.进入虚拟环境并执行脚本**\n>\n> - ```pipenv shell```\n>\n> - ```python tencent_video.py /Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls out.mp4```\n>\n\n\n\n完结\n","source":"_posts/缓存腾讯视频文件.md","raw":"---\ntitle: 缓存腾讯视频文件\ndate: 2019-05-19 20:44:48\nsubtitle: macOS 获取腾讯视频缓存视频文件并转为mp4\ncategories:\n- 劈柴\ntags:\n- Python\n- ffmpeg\n- macOS\ncover: http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3156.jpg\n---\n> 事件起因\n\n##### 最近没网，前两天去朋友那缓存了几部电影，1080p高清视频下载速度刷刷的。拿回来播放的时候就在想，我把视频缓存到电脑了，那我能找到吗？视频是以mp4文件缓存的吗？我能不能拿到腾讯VIP会员的缓存视频？能不能保存高清mp4？\n\n> 事件经过\n\n##### 拿着这些疑问，我就扒拉我电脑(macOS 腾讯视频mac版1.8.2)里面的缓存文件，发现视频缓存在👇这个目录\n\n```\n/Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download\n```\n\n##### 打开里面的video文件夹一看，我滴个神。\n\n> ad\t\t\tg00208rhr0m.320092.hls\tl0019sl1ggv.321003.hls\n> c00226jie90.321003.hls\tj0022vz0heu.321003.hls\n\n##### 看文件夹结尾的名字hls \\(^o^)/~ ，再打开翻到最里面，发现里面的文件是.ts 而且可以正常播放，注意可以正常播放的哦，😏，（我还以为腾讯会自定义视频头信息，自定义播放器。看到这就放心了）直接使用ffmpeg合并为一个视频就行。\n\n##### 再然后搬出Python大宝剑，开始劈柴。\n\n```python\nimport os,sys\nimport logging\nfrom ffmpy import FFmpeg\nfrom natsort import natsorted\n\nlogger = logging.getLogger(__name__)\n\n\ndef hls_dir_to_mp4(in_path_dir, out_path_file):\n    \"\"\"\n    将hls文件夹里面分片的视频转化为单个MP4文件\n    ffmpeg -i \"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc out.mp4\n    :param in_path:\n    :param out_path:\n    :return:\n    \"\"\"\n    # 获取\"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\"列表参数\n    out_files = []\n    for dir in natsorted([val for val in os.listdir(in_path_dir) if val.startswith(in_path_dir.split(\"/\")[-1])]):\n        dirPath = os.path.join(in_path_dir, dir)\n        print(dirPath)\n\n        for root, dirs, files in os.walk(dirPath):\n            files = natsorted(files)\n            for file in files:\n                if os.path.splitext(file)[1] == '.ts':\n                    # 拼接成完整路径\n                    filePath = os.path.join(root, file)\n                    out_files.append(filePath)\n\n    cmd = '|'.join(out_files)\n    print(out_files)\n    cmd = 'concat:' + \"\\\"\" + cmd + \"\\\"\"\n    cmd = 'ffmpeg -i ' + cmd + ' -acodec copy -vcodec copy -absf aac_adtstoasc ' + out_path_file\n    print(execCmd(cmd))\n\n\ndef videoCurv():\n    \"\"\"\n    转换视频格式\n    :return:\n    \"\"\"\n    # 转换input.mp4 为 output.avi\n    FFmpeg(inputs={in_path: None}, outputs={out_path: None}).run()\n\n\ndef execCmd(cmd):\n    \"\"\"\n    执行计算命令时间\n    \"\"\"\n    r = os.popen(cmd)\n    text = r.read().strip()\n    r.close()\n    return text\n\n\nif __name__ == '__main__':\n    print(sys.argv)\n    if len(sys.argv) == 3:\n        hls_dir_to_mp4(sys.argv[1], sys.argv[2])\n    elif len(sys.argv) > 1:\n        hls_dir_to_mp4(sys.argv[1], 'tmp.mp4')\n    else:\n        print('请输入视频所在目录path')\n    # hls_dir_to_mp4(\n    #     in_path_dir='/Users/bunny/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls',\n    #     out_path_file='1.mp4');\n\n```\n\n\n\n### 打完收工\n\n代码已上传[GitHub](https://github.com/yaooort/videoCreate)\n\n### 使用方法\n\n> **1.安装ffmpeg**\n>\n> - ``` brew install ffmpeg```\n\n> **2.[安装Python3](https://www.python.org/downloads/)**\n>\n> **3.安装pipenv**\n>\n> - ```pip install pipenv```\n>\n> **4.创建虚拟环境并安装依赖包**\n>\n> - ``` pipenv shell```\n>\n> **5.进入虚拟环境并执行脚本**\n>\n> - ```pipenv shell```\n>\n> - ```python tencent_video.py /Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls out.mp4```\n>\n\n\n\n完结\n","slug":"缓存腾讯视频文件","published":1,"updated":"2019-05-19T14:34:33.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0qyyvw000eg6ofozz9srjs","content":"<blockquote>\n<p>事件起因</p>\n</blockquote>\n<h5 id=\"最近没网前两天去朋友那缓存了几部电影1080p高清视频下载速度刷刷的-拿回来播放的时候就在想我把视频缓存到电脑了那我能找到吗视频是以mp4文件缓存的吗我能不能拿到腾讯vip会员的缓存视频能不能保存高清mp4\"><a class=\"markdownIt-Anchor\" href=\"#最近没网前两天去朋友那缓存了几部电影1080p高清视频下载速度刷刷的-拿回来播放的时候就在想我把视频缓存到电脑了那我能找到吗视频是以mp4文件缓存的吗我能不能拿到腾讯vip会员的缓存视频能不能保存高清mp4\"></a> 最近没网，前两天去朋友那缓存了几部电影，1080p高清视频下载速度刷刷的。拿回来播放的时候就在想，我把视频缓存到电脑了，那我能找到吗？视频是以mp4文件缓存的吗？我能不能拿到腾讯VIP会员的缓存视频？能不能保存高清mp4？</h5>\n<blockquote>\n<p>事件经过</p>\n</blockquote>\n<h5 id=\"拿着这些疑问我就扒拉我电脑macos-腾讯视频mac版182里面的缓存文件发现视频缓存在这个目录\"><a class=\"markdownIt-Anchor\" href=\"#拿着这些疑问我就扒拉我电脑macos-腾讯视频mac版182里面的缓存文件发现视频缓存在这个目录\"></a> 拿着这些疑问，我就扒拉我电脑(macOS 腾讯视频mac版1.8.2)里面的缓存文件，发现视频缓存在👇这个目录</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download</span><br></pre></td></tr></table></figure>\n<h5 id=\"打开里面的video文件夹一看我滴个神\"><a class=\"markdownIt-Anchor\" href=\"#打开里面的video文件夹一看我滴个神\"></a> 打开里面的video文件夹一看，我滴个神。</h5>\n<blockquote>\n<p>ad\t\t\tg00208rhr0m.320092.hls\tl0019sl1ggv.321003.hls<br>\nc00226jie90.321003.hls\tj0022vz0heu.321003.hls</p>\n</blockquote>\n<h5 id=\"看文件夹结尾的名字hls-o~-再打开翻到最里面发现里面的文件是ts-而且可以正常播放注意可以正常播放的哦我还以为腾讯会自定义视频头信息自定义播放器-看到这就放心了直接使用ffmpeg合并为一个视频就行\"><a class=\"markdownIt-Anchor\" href=\"#看文件夹结尾的名字hls-o~-再打开翻到最里面发现里面的文件是ts-而且可以正常播放注意可以正常播放的哦我还以为腾讯会自定义视频头信息自定义播放器-看到这就放心了直接使用ffmpeg合并为一个视频就行\"></a> 看文件夹结尾的名字hls (<sup>o</sup>)/~ ，再打开翻到最里面，发现里面的文件是.ts 而且可以正常播放，注意可以正常播放的哦，😏，（我还以为腾讯会自定义视频头信息，自定义播放器。看到这就放心了）直接使用ffmpeg合并为一个视频就行。</h5>\n<h5 id=\"再然后搬出python大宝剑开始劈柴\"><a class=\"markdownIt-Anchor\" href=\"#再然后搬出python大宝剑开始劈柴\"></a> 再然后搬出Python大宝剑，开始劈柴。</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os,sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">from</span> ffmpy <span class=\"keyword\">import</span> FFmpeg</span><br><span class=\"line\"><span class=\"keyword\">from</span> natsort <span class=\"keyword\">import</span> natsorted</span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hls_dir_to_mp4</span><span class=\"params\">(in_path_dir, out_path_file)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    将hls文件夹里面分片的视频转化为单个MP4文件</span></span><br><span class=\"line\"><span class=\"string\">    ffmpeg -i \"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc out.mp4</span></span><br><span class=\"line\"><span class=\"string\">    :param in_path:</span></span><br><span class=\"line\"><span class=\"string\">    :param out_path:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取\"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\"列表参数</span></span><br><span class=\"line\">    out_files = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dir <span class=\"keyword\">in</span> natsorted([val <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> os.listdir(in_path_dir) <span class=\"keyword\">if</span> val.startswith(in_path_dir.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-1</span>])]):</span><br><span class=\"line\">        dirPath = os.path.join(in_path_dir, dir)</span><br><span class=\"line\">        print(dirPath)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(dirPath):</span><br><span class=\"line\">            files = natsorted(files)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> os.path.splitext(file)[<span class=\"number\">1</span>] == <span class=\"string\">'.ts'</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 拼接成完整路径</span></span><br><span class=\"line\">                    filePath = os.path.join(root, file)</span><br><span class=\"line\">                    out_files.append(filePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    cmd = <span class=\"string\">'|'</span>.join(out_files)</span><br><span class=\"line\">    print(out_files)</span><br><span class=\"line\">    cmd = <span class=\"string\">'concat:'</span> + <span class=\"string\">\"\\\"\"</span> + cmd + <span class=\"string\">\"\\\"\"</span></span><br><span class=\"line\">    cmd = <span class=\"string\">'ffmpeg -i '</span> + cmd + <span class=\"string\">' -acodec copy -vcodec copy -absf aac_adtstoasc '</span> + out_path_file</span><br><span class=\"line\">    print(execCmd(cmd))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">videoCurv</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    转换视频格式</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 转换input.mp4 为 output.avi</span></span><br><span class=\"line\">    FFmpeg(inputs=&#123;in_path: <span class=\"literal\">None</span>&#125;, outputs=&#123;out_path: <span class=\"literal\">None</span>&#125;).run()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execCmd</span><span class=\"params\">(cmd)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    执行计算命令时间</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    r = os.popen(cmd)</span><br><span class=\"line\">    text = r.read().strip()</span><br><span class=\"line\">    r.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(sys.argv)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) == <span class=\"number\">3</span>:</span><br><span class=\"line\">        hls_dir_to_mp4(sys.argv[<span class=\"number\">1</span>], sys.argv[<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> len(sys.argv) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        hls_dir_to_mp4(sys.argv[<span class=\"number\">1</span>], <span class=\"string\">'tmp.mp4'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'请输入视频所在目录path'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># hls_dir_to_mp4(</span></span><br><span class=\"line\">    <span class=\"comment\">#     in_path_dir='/Users/bunny/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls',</span></span><br><span class=\"line\">    <span class=\"comment\">#     out_path_file='1.mp4');</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"打完收工\"><a class=\"markdownIt-Anchor\" href=\"#打完收工\"></a> 打完收工</h3>\n<p>代码已上传<a href=\"https://github.com/yaooort/videoCreate\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<h3 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h3>\n<blockquote>\n<p><strong>1.安装ffmpeg</strong></p>\n<ul>\n<li>\n<figure class=\"highlight plain\"><figcaption><span>install ffmpeg```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; **2.[安装Python3](https://www.python.org/downloads/)**</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; **3.安装pipenv**</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; - ```pip install pipenv</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>4.创建虚拟环境并安装依赖包</strong></p>\n<ul>\n<li>\n<figure class=\"highlight plain\"><figcaption><span>shell```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; **5.进入虚拟环境并执行脚本**</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; - ```pipenv shell</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>python tencent_video.py /Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls out.mp4</code></li>\n</ul>\n</blockquote>\n<p>完结</p>\n","site":{"data":{"links":[{"name":"Yaooort","describe":"大傻子","link":"http://www.yaooort.com","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_4172.jpg"},{"name":"GitHub","describe":"直男网","link":"https://github.com/yaooort","cover":"http://prr6elh1d.sabkt.gdipper.com/static/images/IMG_3829.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>事件起因</p>\n</blockquote>\n<h5 id=\"最近没网前两天去朋友那缓存了几部电影1080p高清视频下载速度刷刷的-拿回来播放的时候就在想我把视频缓存到电脑了那我能找到吗视频是以mp4文件缓存的吗我能不能拿到腾讯vip会员的缓存视频能不能保存高清mp4\"><a class=\"markdownIt-Anchor\" href=\"#最近没网前两天去朋友那缓存了几部电影1080p高清视频下载速度刷刷的-拿回来播放的时候就在想我把视频缓存到电脑了那我能找到吗视频是以mp4文件缓存的吗我能不能拿到腾讯vip会员的缓存视频能不能保存高清mp4\"></a> 最近没网，前两天去朋友那缓存了几部电影，1080p高清视频下载速度刷刷的。拿回来播放的时候就在想，我把视频缓存到电脑了，那我能找到吗？视频是以mp4文件缓存的吗？我能不能拿到腾讯VIP会员的缓存视频？能不能保存高清mp4？</h5>\n<blockquote>\n<p>事件经过</p>\n</blockquote>\n<h5 id=\"拿着这些疑问我就扒拉我电脑macos-腾讯视频mac版182里面的缓存文件发现视频缓存在这个目录\"><a class=\"markdownIt-Anchor\" href=\"#拿着这些疑问我就扒拉我电脑macos-腾讯视频mac版182里面的缓存文件发现视频缓存在这个目录\"></a> 拿着这些疑问，我就扒拉我电脑(macOS 腾讯视频mac版1.8.2)里面的缓存文件，发现视频缓存在👇这个目录</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download</span><br></pre></td></tr></table></figure>\n<h5 id=\"打开里面的video文件夹一看我滴个神\"><a class=\"markdownIt-Anchor\" href=\"#打开里面的video文件夹一看我滴个神\"></a> 打开里面的video文件夹一看，我滴个神。</h5>\n<blockquote>\n<p>ad\t\t\tg00208rhr0m.320092.hls\tl0019sl1ggv.321003.hls<br>\nc00226jie90.321003.hls\tj0022vz0heu.321003.hls</p>\n</blockquote>\n<h5 id=\"看文件夹结尾的名字hls-o~-再打开翻到最里面发现里面的文件是ts-而且可以正常播放注意可以正常播放的哦我还以为腾讯会自定义视频头信息自定义播放器-看到这就放心了直接使用ffmpeg合并为一个视频就行\"><a class=\"markdownIt-Anchor\" href=\"#看文件夹结尾的名字hls-o~-再打开翻到最里面发现里面的文件是ts-而且可以正常播放注意可以正常播放的哦我还以为腾讯会自定义视频头信息自定义播放器-看到这就放心了直接使用ffmpeg合并为一个视频就行\"></a> 看文件夹结尾的名字hls (<sup>o</sup>)/~ ，再打开翻到最里面，发现里面的文件是.ts 而且可以正常播放，注意可以正常播放的哦，😏，（我还以为腾讯会自定义视频头信息，自定义播放器。看到这就放心了）直接使用ffmpeg合并为一个视频就行。</h5>\n<h5 id=\"再然后搬出python大宝剑开始劈柴\"><a class=\"markdownIt-Anchor\" href=\"#再然后搬出python大宝剑开始劈柴\"></a> 再然后搬出Python大宝剑，开始劈柴。</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os,sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">from</span> ffmpy <span class=\"keyword\">import</span> FFmpeg</span><br><span class=\"line\"><span class=\"keyword\">from</span> natsort <span class=\"keyword\">import</span> natsorted</span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hls_dir_to_mp4</span><span class=\"params\">(in_path_dir, out_path_file)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    将hls文件夹里面分片的视频转化为单个MP4文件</span></span><br><span class=\"line\"><span class=\"string\">    ffmpeg -i \"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc out.mp4</span></span><br><span class=\"line\"><span class=\"string\">    :param in_path:</span></span><br><span class=\"line\"><span class=\"string\">    :param out_path:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取\"concat:file001.ts|file002.ts|file003.ts|file004.ts......n.ts\"列表参数</span></span><br><span class=\"line\">    out_files = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dir <span class=\"keyword\">in</span> natsorted([val <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> os.listdir(in_path_dir) <span class=\"keyword\">if</span> val.startswith(in_path_dir.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-1</span>])]):</span><br><span class=\"line\">        dirPath = os.path.join(in_path_dir, dir)</span><br><span class=\"line\">        print(dirPath)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(dirPath):</span><br><span class=\"line\">            files = natsorted(files)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> os.path.splitext(file)[<span class=\"number\">1</span>] == <span class=\"string\">'.ts'</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 拼接成完整路径</span></span><br><span class=\"line\">                    filePath = os.path.join(root, file)</span><br><span class=\"line\">                    out_files.append(filePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    cmd = <span class=\"string\">'|'</span>.join(out_files)</span><br><span class=\"line\">    print(out_files)</span><br><span class=\"line\">    cmd = <span class=\"string\">'concat:'</span> + <span class=\"string\">\"\\\"\"</span> + cmd + <span class=\"string\">\"\\\"\"</span></span><br><span class=\"line\">    cmd = <span class=\"string\">'ffmpeg -i '</span> + cmd + <span class=\"string\">' -acodec copy -vcodec copy -absf aac_adtstoasc '</span> + out_path_file</span><br><span class=\"line\">    print(execCmd(cmd))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">videoCurv</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    转换视频格式</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 转换input.mp4 为 output.avi</span></span><br><span class=\"line\">    FFmpeg(inputs=&#123;in_path: <span class=\"literal\">None</span>&#125;, outputs=&#123;out_path: <span class=\"literal\">None</span>&#125;).run()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execCmd</span><span class=\"params\">(cmd)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    执行计算命令时间</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    r = os.popen(cmd)</span><br><span class=\"line\">    text = r.read().strip()</span><br><span class=\"line\">    r.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(sys.argv)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) == <span class=\"number\">3</span>:</span><br><span class=\"line\">        hls_dir_to_mp4(sys.argv[<span class=\"number\">1</span>], sys.argv[<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> len(sys.argv) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        hls_dir_to_mp4(sys.argv[<span class=\"number\">1</span>], <span class=\"string\">'tmp.mp4'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'请输入视频所在目录path'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># hls_dir_to_mp4(</span></span><br><span class=\"line\">    <span class=\"comment\">#     in_path_dir='/Users/bunny/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls',</span></span><br><span class=\"line\">    <span class=\"comment\">#     out_path_file='1.mp4');</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"打完收工\"><a class=\"markdownIt-Anchor\" href=\"#打完收工\"></a> 打完收工</h3>\n<p>代码已上传<a href=\"https://github.com/yaooort/videoCreate\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n<h3 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h3>\n<blockquote>\n<p><strong>1.安装ffmpeg</strong></p>\n<ul>\n<li>\n<figure class=\"highlight plain\"><figcaption><span>install ffmpeg```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; **2.[安装Python3](https://www.python.org/downloads/)**</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; **3.安装pipenv**</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; - ```pip install pipenv</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>4.创建虚拟环境并安装依赖包</strong></p>\n<ul>\n<li>\n<figure class=\"highlight plain\"><figcaption><span>shell```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; **5.进入虚拟环境并执行脚本**</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; - ```pipenv shell</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>python tencent_video.py /Users/用户/Library/Containers/com.tencent.tenvideo/Data/Library/Application Support/Download/video/g00208rhr0m.320092.hls out.mp4</code></li>\n</ul>\n</blockquote>\n<p>完结</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjw0qyyvk0002g6ofglk3db0y","category_id":"cjw0qyyvt000bg6ofvgr8y6qd","_id":"cjw0qyyvy000hg6of53fcpuk0"},{"post_id":"cjw0qyyvp0006g6ofw5jwckwp","category_id":"cjw0qyyvx000fg6of858zs1x5","_id":"cjw0qyyw0000mg6of74rl0si4"},{"post_id":"cjw0qyyvr0008g6of8lj3bi9l","category_id":"cjw0qyyvy000ig6of2i97uvth","_id":"cjw0qyyw2000qg6ofqncf2p8h"},{"post_id":"cjw0qyyve0000g6ofr0cpkz3o","category_id":"cjw0qyyvm0004g6of07tu5gkb","_id":"cjw0qyyw3000vg6of8webggah"},{"post_id":"cjw0qyyve0000g6ofr0cpkz3o","category_id":"cjw0qyyw1000og6ofiildqg5x","_id":"cjw0qyyw4000zg6ofkfmppz9l"},{"post_id":"cjw0qyyvs000ag6of6ntihf2w","category_id":"cjw0qyyw2000sg6of16mpwx36","_id":"cjw0qyyw40011g6ofu7luq60x"},{"post_id":"cjw0qyyvw000eg6ofozz9srjs","category_id":"cjw0qyyw2000sg6of16mpwx36","_id":"cjw0qyyw50012g6ofbwl69w7k"}],"PostTag":[{"post_id":"cjw0qyyve0000g6ofr0cpkz3o","tag_id":"cjw0qyyvo0005g6ofrn2gjlws","_id":"cjw0qyyw0000kg6ofu3uaphad"},{"post_id":"cjw0qyyve0000g6ofr0cpkz3o","tag_id":"cjw0qyyvt000cg6ofiqrzju6g","_id":"cjw0qyyw0000lg6ofljy38ihr"},{"post_id":"cjw0qyyve0000g6ofr0cpkz3o","tag_id":"cjw0qyyvy000gg6of4ocoynvz","_id":"cjw0qyyw1000pg6of0r3o64r6"},{"post_id":"cjw0qyyvk0002g6ofglk3db0y","tag_id":"cjw0qyyvo0005g6ofrn2gjlws","_id":"cjw0qyyw2000tg6ofyypfnptk"},{"post_id":"cjw0qyyvk0002g6ofglk3db0y","tag_id":"cjw0qyyw1000ng6of4h95996w","_id":"cjw0qyyw2000ug6of9gsvtrau"},{"post_id":"cjw0qyyvp0006g6ofw5jwckwp","tag_id":"cjw0qyyw2000rg6ofxaodkern","_id":"cjw0qyyw4000yg6oftkc9z9le"},{"post_id":"cjw0qyyvr0008g6of8lj3bi9l","tag_id":"cjw0qyyvy000gg6of4ocoynvz","_id":"cjw0qyyw50014g6ofsicee79i"},{"post_id":"cjw0qyyvr0008g6of8lj3bi9l","tag_id":"cjw0qyyw40010g6ofs26uni8c","_id":"cjw0qyyw50015g6ofekoj33p3"},{"post_id":"cjw0qyyvs000ag6of6ntihf2w","tag_id":"cjw0qyyw50013g6oftfw9yzk1","_id":"cjw0qyyw60018g6offo4hhs50"},{"post_id":"cjw0qyyvs000ag6of6ntihf2w","tag_id":"cjw0qyyw50016g6ofgg06x498","_id":"cjw0qyyw60019g6of9up0yotd"},{"post_id":"cjw0qyyvw000eg6ofozz9srjs","tag_id":"cjw0qyyvo0005g6ofrn2gjlws","_id":"cjw0qyyw6001bg6ofa3qv4ie2"},{"post_id":"cjw0qyyvw000eg6ofozz9srjs","tag_id":"cjw0qyyw60017g6oftz2lfyng","_id":"cjw0qyyw7001cg6ofi2lr62kw"},{"post_id":"cjw0qyyvw000eg6ofozz9srjs","tag_id":"cjw0qyyw50016g6ofgg06x498","_id":"cjw0qyyw7001dg6of75tyev2f"}],"Tag":[{"name":"Python","_id":"cjw0qyyvo0005g6ofrn2gjlws"},{"name":"Android","_id":"cjw0qyyvt000cg6ofiqrzju6g"},{"name":"iOS","_id":"cjw0qyyvy000gg6of4ocoynvz"},{"name":"BeautifulSoup","_id":"cjw0qyyw1000ng6of4h95996w"},{"name":"js","_id":"cjw0qyyw2000rg6ofxaodkern"},{"name":"自动布局","_id":"cjw0qyyw40010g6ofs26uni8c"},{"name":"Python2.7","_id":"cjw0qyyw50013g6oftfw9yzk1"},{"name":"macOS","_id":"cjw0qyyw50016g6ofgg06x498"},{"name":"ffmpeg","_id":"cjw0qyyw60017g6oftz2lfyng"}]}}